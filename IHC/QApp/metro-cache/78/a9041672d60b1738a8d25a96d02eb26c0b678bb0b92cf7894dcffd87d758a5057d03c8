{"dependencies":[{"name":"./version","data":{"isAsync":false}},{"name":"./regex","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Version = _$$_REQUIRE(_dependencyMap[0], \"./version\");\n\n  var Regex = _$$_REQUIRE(_dependencyMap[1], \"./regex\");\n\n  exports.NUMERIC = {\n    id: 'Numeric',\n    bit: 1 << 0,\n    ccBits: [10, 12, 14]\n  };\n  exports.ALPHANUMERIC = {\n    id: 'Alphanumeric',\n    bit: 1 << 1,\n    ccBits: [9, 11, 13]\n  };\n  exports.BYTE = {\n    id: 'Byte',\n    bit: 1 << 2,\n    ccBits: [8, 16, 16]\n  };\n  exports.KANJI = {\n    id: 'Kanji',\n    bit: 1 << 3,\n    ccBits: [8, 10, 12]\n  };\n  exports.MIXED = {\n    bit: -1\n  };\n\n  exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n    if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);\n\n    if (!Version.isValid(version)) {\n      throw new Error('Invalid version: ' + version);\n    }\n\n    if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];\n    return mode.ccBits[2];\n  };\n\n  exports.getBestModeForData = function getBestModeForData(dataStr) {\n    if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;\n  };\n\n  exports.toString = function toString(mode) {\n    if (mode && mode.id) return mode.id;\n    throw new Error('Invalid mode');\n  };\n\n  exports.isValid = function isValid(mode) {\n    return mode && mode.bit && mode.ccBits;\n  };\n\n  function fromString(string) {\n    if (typeof string !== 'string') {\n      throw new Error('Param is not a string');\n    }\n\n    var lcStr = string.toLowerCase();\n\n    switch (lcStr) {\n      case 'numeric':\n        return exports.NUMERIC;\n\n      case 'alphanumeric':\n        return exports.ALPHANUMERIC;\n\n      case 'kanji':\n        return exports.KANJI;\n\n      case 'byte':\n        return exports.BYTE;\n\n      default:\n        throw new Error('Unknown mode: ' + string);\n    }\n  }\n\n  exports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n      return value;\n    }\n\n    try {\n      return fromString(value);\n    } catch (e) {\n      return defaultValue;\n    }\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"Version"],[2,13,1,11],[2,16,1,14,"require"],[2,27,1,21],[2,59,1,0],[4,0,2,0],[4,6,2,4,"Regex"],[4,11,2,9],[4,14,2,12,"require"],[4,25,2,19],[4,55,2,0],[6,0,11,0,"exports"],[6,2,11,0,"exports"],[6,9,11,7],[6,10,11,8,"NUMERIC"],[6,17,11,0],[6,20,11,18],[7,0,12,2,"id"],[7,4,12,2,"id"],[7,6,12,4],[7,8,12,6],[7,17,11,18],[8,0,13,2,"bit"],[8,4,13,2,"bit"],[8,7,13,5],[8,9,13,7],[8,14,13,12],[8,15,11,18],[9,0,14,2,"ccBits"],[9,4,14,2,"ccBits"],[9,10,14,8],[9,12,14,10],[9,13,14,11],[9,15,14,10],[9,17,14,15],[9,19,14,10],[9,21,14,19],[9,23,14,10],[10,0,11,18],[10,3,11,0],[11,0,26,0,"exports"],[11,2,26,0,"exports"],[11,9,26,7],[11,10,26,8,"ALPHANUMERIC"],[11,22,26,0],[11,25,26,23],[12,0,27,2,"id"],[12,4,27,2,"id"],[12,6,27,4],[12,8,27,6],[12,22,26,23],[13,0,28,2,"bit"],[13,4,28,2,"bit"],[13,7,28,5],[13,9,28,7],[13,14,28,12],[13,15,26,23],[14,0,29,2,"ccBits"],[14,4,29,2,"ccBits"],[14,10,29,8],[14,12,29,10],[14,13,29,11],[14,14,29,10],[14,16,29,14],[14,18,29,10],[14,20,29,18],[14,22,29,10],[15,0,26,23],[15,3,26,0],[16,0,37,0,"exports"],[16,2,37,0,"exports"],[16,9,37,7],[16,10,37,8,"BYTE"],[16,14,37,0],[16,17,37,15],[17,0,38,2,"id"],[17,4,38,2,"id"],[17,6,38,4],[17,8,38,6],[17,14,37,15],[18,0,39,2,"bit"],[18,4,39,2,"bit"],[18,7,39,5],[18,9,39,7],[18,14,39,12],[18,15,37,15],[19,0,40,2,"ccBits"],[19,4,40,2,"ccBits"],[19,10,40,8],[19,12,40,10],[19,13,40,11],[19,14,40,10],[19,16,40,14],[19,18,40,10],[19,20,40,18],[19,22,40,10],[20,0,37,15],[20,3,37,0],[21,0,52,0,"exports"],[21,2,52,0,"exports"],[21,9,52,7],[21,10,52,8,"KANJI"],[21,15,52,0],[21,18,52,16],[22,0,53,2,"id"],[22,4,53,2,"id"],[22,6,53,4],[22,8,53,6],[22,15,52,16],[23,0,54,2,"bit"],[23,4,54,2,"bit"],[23,7,54,5],[23,9,54,7],[23,14,54,12],[23,15,52,16],[24,0,55,2,"ccBits"],[24,4,55,2,"ccBits"],[24,10,55,8],[24,12,55,10],[24,13,55,11],[24,14,55,10],[24,16,55,14],[24,18,55,10],[24,20,55,18],[24,22,55,10],[25,0,52,16],[25,3,52,0],[26,0,64,0,"exports"],[26,2,64,0,"exports"],[26,9,64,7],[26,10,64,8,"MIXED"],[26,15,64,0],[26,18,64,16],[27,0,65,2,"bit"],[27,4,65,2,"bit"],[27,7,65,5],[27,9,65,7],[27,10,65,8],[28,0,64,16],[28,3,64,0],[30,0,76,0,"exports"],[30,2,76,0,"exports"],[30,9,76,7],[30,10,76,8,"getCharCountIndicator"],[30,31,76,0],[30,34,76,32],[30,43,76,41,"getCharCountIndicator"],[30,64,76,32],[30,65,76,64,"mode"],[30,69,76,32],[30,71,76,70,"version"],[30,78,76,32],[30,80,76,79],[31,0,77,2],[31,8,77,6],[31,9,77,7,"mode"],[31,13,77,11],[31,14,77,12,"ccBits"],[31,20,77,2],[31,22,77,20],[31,28,77,26],[31,32,77,30,"Error"],[31,37,77,26],[31,38,77,36],[31,57,77,55,"mode"],[31,61,77,26],[31,62,77,20],[33,0,79,2],[33,8,79,6],[33,9,79,7,"Version"],[33,16,79,14],[33,17,79,15,"isValid"],[33,24,79,7],[33,25,79,23,"version"],[33,32,79,7],[33,33,79,2],[33,35,79,33],[34,0,80,4],[34,12,80,10],[34,16,80,14,"Error"],[34,21,80,10],[34,22,80,20],[34,44,80,42,"version"],[34,51,80,10],[34,52,80,4],[35,0,81,3],[37,0,83,2],[37,8,83,6,"version"],[37,15,83,13],[37,19,83,17],[37,20,83,6],[37,24,83,22,"version"],[37,31,83,29],[37,34,83,32],[37,36,83,2],[37,38,83,36],[37,45,83,43,"mode"],[37,49,83,47],[37,50,83,48,"ccBits"],[37,56,83,43],[37,57,83,55],[37,58,83,43],[37,59,83,36],[37,60,83,2],[37,65,84,7],[37,69,84,11,"version"],[37,76,84,18],[37,79,84,21],[37,81,84,7],[37,83,84,25],[37,90,84,32,"mode"],[37,94,84,36],[37,95,84,37,"ccBits"],[37,101,84,32],[37,102,84,44],[37,103,84,32],[37,104,84,25],[38,0,85,2],[38,11,85,9,"mode"],[38,15,85,13],[38,16,85,14,"ccBits"],[38,22,85,9],[38,23,85,21],[38,24,85,9],[38,25,85,2],[39,0,86,1],[39,3,76,0],[41,0,94,0,"exports"],[41,2,94,0,"exports"],[41,9,94,7],[41,10,94,8,"getBestModeForData"],[41,28,94,0],[41,31,94,29],[41,40,94,38,"getBestModeForData"],[41,58,94,29],[41,59,94,58,"dataStr"],[41,66,94,29],[41,68,94,67],[42,0,95,2],[42,8,95,6,"Regex"],[42,13,95,11],[42,14,95,12,"testNumeric"],[42,25,95,6],[42,26,95,24,"dataStr"],[42,33,95,6],[42,34,95,2],[42,36,95,34],[42,43,95,41,"exports"],[42,50,95,48],[42,51,95,49,"NUMERIC"],[42,58,95,34],[42,59,95,2],[42,64,96,7],[42,68,96,11,"Regex"],[42,73,96,16],[42,74,96,17,"testAlphanumeric"],[42,90,96,11],[42,91,96,34,"dataStr"],[42,98,96,11],[42,99,96,7],[42,101,96,44],[42,108,96,51,"exports"],[42,115,96,58],[42,116,96,59,"ALPHANUMERIC"],[42,128,96,44],[42,129,96,7],[42,134,97,7],[42,138,97,11,"Regex"],[42,143,97,16],[42,144,97,17,"testKanji"],[42,153,97,11],[42,154,97,27,"dataStr"],[42,161,97,11],[42,162,97,7],[42,164,97,37],[42,171,97,44,"exports"],[42,178,97,51],[42,179,97,52,"KANJI"],[42,184,97,37],[42,185,97,7],[42,190,98,7],[42,197,98,14,"exports"],[42,204,98,21],[42,205,98,22,"BYTE"],[42,209,98,7],[43,0,99,1],[43,3,94,0],[45,0,107,0,"exports"],[45,2,107,0,"exports"],[45,9,107,7],[45,10,107,8,"toString"],[45,18,107,0],[45,21,107,19],[45,30,107,28,"toString"],[45,38,107,19],[45,39,107,38,"mode"],[45,43,107,19],[45,45,107,44],[46,0,108,2],[46,8,108,6,"mode"],[46,12,108,10],[46,16,108,14,"mode"],[46,20,108,18],[46,21,108,19,"id"],[46,23,108,2],[46,25,108,23],[46,32,108,30,"mode"],[46,36,108,34],[46,37,108,35,"id"],[46,39,108,23],[47,0,109,2],[47,10,109,8],[47,14,109,12,"Error"],[47,19,109,8],[47,20,109,18],[47,34,109,8],[47,35,109,2],[48,0,110,1],[48,3,107,0],[50,0,118,0,"exports"],[50,2,118,0,"exports"],[50,9,118,7],[50,10,118,8,"isValid"],[50,17,118,0],[50,20,118,18],[50,29,118,27,"isValid"],[50,36,118,18],[50,37,118,36,"mode"],[50,41,118,18],[50,43,118,42],[51,0,119,2],[51,11,119,9,"mode"],[51,15,119,13],[51,19,119,17,"mode"],[51,23,119,21],[51,24,119,22,"bit"],[51,27,119,9],[51,31,119,29,"mode"],[51,35,119,33],[51,36,119,34,"ccBits"],[51,42,119,2],[52,0,120,1],[52,3,118,0],[54,0,128,0],[54,11,128,9,"fromString"],[54,21,128,0],[54,22,128,21,"string"],[54,28,128,0],[54,30,128,29],[55,0,129,2],[55,8,129,6],[55,15,129,13,"string"],[55,21,129,6],[55,26,129,24],[55,34,129,2],[55,36,129,34],[56,0,130,4],[56,12,130,10],[56,16,130,14,"Error"],[56,21,130,10],[56,22,130,20],[56,45,130,10],[56,46,130,4],[57,0,131,3],[59,0,133,2],[59,8,133,6,"lcStr"],[59,13,133,11],[59,16,133,14,"string"],[59,22,133,20],[59,23,133,21,"toLowerCase"],[59,34,133,14],[59,36,133,2],[61,0,135,2],[61,12,135,10,"lcStr"],[61,17,135,2],[62,0,136,4],[62,11,136,9],[62,20,136,4],[63,0,137,6],[63,15,137,13,"exports"],[63,22,137,20],[63,23,137,21,"NUMERIC"],[63,30,137,6],[65,0,138,4],[65,11,138,9],[65,25,138,4],[66,0,139,6],[66,15,139,13,"exports"],[66,22,139,20],[66,23,139,21,"ALPHANUMERIC"],[66,35,139,6],[68,0,140,4],[68,11,140,9],[68,18,140,4],[69,0,141,6],[69,15,141,13,"exports"],[69,22,141,20],[69,23,141,21,"KANJI"],[69,28,141,6],[71,0,142,4],[71,11,142,9],[71,17,142,4],[72,0,143,6],[72,15,143,13,"exports"],[72,22,143,20],[72,23,143,21,"BYTE"],[72,27,143,6],[74,0,144,4],[75,0,145,6],[75,14,145,12],[75,18,145,16,"Error"],[75,23,145,12],[75,24,145,22],[75,43,145,41,"string"],[75,49,145,12],[75,50,145,6],[76,0,135,2],[77,0,147,1],[79,0,157,0,"exports"],[79,2,157,0,"exports"],[79,9,157,7],[79,10,157,8,"from"],[79,14,157,0],[79,17,157,15],[79,26,157,24,"from"],[79,30,157,15],[79,31,157,30,"value"],[79,36,157,15],[79,38,157,37,"defaultValue"],[79,50,157,15],[79,52,157,51],[80,0,158,2],[80,8,158,6,"exports"],[80,15,158,13],[80,16,158,14,"isValid"],[80,23,158,6],[80,24,158,22,"value"],[80,29,158,6],[80,30,158,2],[80,32,158,30],[81,0,159,4],[81,13,159,11,"value"],[81,18,159,4],[82,0,160,3],[84,0,162,2],[84,8,162,6],[85,0,163,4],[85,13,163,11,"fromString"],[85,23,163,21],[85,24,163,22,"value"],[85,29,163,21],[85,30,163,4],[86,0,164,3],[86,5,162,2],[86,6,164,4],[86,13,164,11,"e"],[86,14,164,4],[86,16,164,14],[87,0,165,4],[87,13,165,11,"defaultValue"],[87,25,165,4],[88,0,166,3],[89,0,167,1],[89,3,157,0]]},"type":"js/module"}]}