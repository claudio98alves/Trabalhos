{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function BitBuffer() {\n    this.buffer = [];\n    this.length = 0;\n  }\n\n  BitBuffer.prototype = {\n    get: function get(index) {\n      var bufIndex = Math.floor(index / 8);\n      return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\n    },\n    put: function put(num, length) {\n      for (var i = 0; i < length; i++) {\n        this.putBit((num >>> length - i - 1 & 1) === 1);\n      }\n    },\n    getLengthInBits: function getLengthInBits() {\n      return this.length;\n    },\n    putBit: function putBit(bit) {\n      var bufIndex = Math.floor(this.length / 8);\n\n      if (this.buffer.length <= bufIndex) {\n        this.buffer.push(0);\n      }\n\n      if (bit) {\n        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n      }\n\n      this.length++;\n    }\n  };\n  module.exports = BitBuffer;\n});","map":[[2,0,1,0],[2,11,1,9,"BitBuffer"],[2,20,1,0],[2,23,1,22],[3,0,2,2],[3,9,2,7,"buffer"],[3,15,2,2],[3,18,2,16],[3,20,2,2],[4,0,3,2],[4,9,3,7,"length"],[4,15,3,2],[4,18,3,16],[4,19,3,2],[5,0,4,1],[7,0,6,0,"BitBuffer"],[7,2,6,0,"BitBuffer"],[7,11,6,9],[7,12,6,10,"prototype"],[7,21,6,0],[7,24,6,22],[8,0,8,2,"get"],[8,4,8,2,"get"],[8,7,8,5],[8,9,8,7],[8,22,8,17,"index"],[8,27,8,7],[8,29,8,24],[9,0,9,4],[9,10,9,8,"bufIndex"],[9,18,9,16],[9,21,9,19,"Math"],[9,25,9,23],[9,26,9,24,"floor"],[9,31,9,19],[9,32,9,30,"index"],[9,37,9,35],[9,40,9,38],[9,41,9,19],[9,42,9,4],[10,0,10,4],[10,13,10,11],[10,14,10,13],[10,19,10,18,"buffer"],[10,25,10,13],[10,26,10,25,"bufIndex"],[10,34,10,13],[10,40,10,40],[10,44,10,44,"index"],[10,49,10,49],[10,52,10,52],[10,53,10,12],[10,56,10,58],[10,57,10,11],[10,63,10,65],[10,64,10,4],[11,0,11,3],[11,5,6,22],[12,0,13,2,"put"],[12,4,13,2,"put"],[12,7,13,5],[12,9,13,7],[12,22,13,17,"num"],[12,25,13,7],[12,27,13,22,"length"],[12,33,13,7],[12,35,13,30],[13,0,14,4],[13,11,14,9],[13,15,14,13,"i"],[13,16,14,14],[13,19,14,17],[13,20,14,4],[13,22,14,20,"i"],[13,23,14,21],[13,26,14,24,"length"],[13,32,14,4],[13,34,14,32,"i"],[13,35,14,33],[13,37,14,4],[13,39,14,37],[14,0,15,6],[14,13,15,11,"putBit"],[14,19,15,6],[14,20,15,18],[14,21,15,20,"num"],[14,24,15,23],[14,29,15,29,"length"],[14,35,15,35],[14,38,15,38,"i"],[14,39,15,29],[14,42,15,42],[14,43,15,19],[14,46,15,48],[14,47,15,18],[14,53,15,55],[14,54,15,6],[15,0,16,5],[16,0,17,3],[16,5,6,22],[17,0,19,2,"getLengthInBits"],[17,4,19,2,"getLengthInBits"],[17,19,19,17],[17,21,19,19],[17,48,19,31],[18,0,20,4],[18,13,20,11],[18,18,20,16,"length"],[18,24,20,4],[19,0,21,3],[19,5,6,22],[20,0,23,2,"putBit"],[20,4,23,2,"putBit"],[20,10,23,8],[20,12,23,10],[20,28,23,20,"bit"],[20,31,23,10],[20,33,23,25],[21,0,24,4],[21,10,24,8,"bufIndex"],[21,18,24,16],[21,21,24,19,"Math"],[21,25,24,23],[21,26,24,24,"floor"],[21,31,24,19],[21,32,24,30],[21,37,24,35,"length"],[21,43,24,30],[21,46,24,44],[21,47,24,19],[21,48,24,4],[23,0,25,4],[23,10,25,8],[23,15,25,13,"buffer"],[23,21,25,8],[23,22,25,20,"length"],[23,28,25,8],[23,32,25,30,"bufIndex"],[23,40,25,4],[23,42,25,40],[24,0,26,6],[24,13,26,11,"buffer"],[24,19,26,6],[24,20,26,18,"push"],[24,24,26,6],[24,25,26,23],[24,26,26,6],[25,0,27,5],[27,0,29,4],[27,10,29,8,"bit"],[27,13,29,4],[27,15,29,13],[28,0,30,6],[28,13,30,11,"buffer"],[28,19,30,6],[28,20,30,18,"bufIndex"],[28,28,30,6],[28,33,30,32],[28,42,30,42],[28,47,30,47,"length"],[28,53,30,42],[28,56,30,56],[28,57,30,6],[29,0,31,5],[31,0,33,4],[31,11,33,9,"length"],[31,17,33,4],[32,0,34,3],[33,0,6,22],[33,3,6,0],[34,0,37,0,"module"],[34,2,37,0,"module"],[34,8,37,6],[34,9,37,7,"exports"],[34,16,37,0],[34,19,37,17,"BitBuffer"],[34,28,37,0]]},"type":"js/module"}]}