{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var dijkstra = {\n    single_source_shortest_paths: function single_source_shortest_paths(graph, s, d) {\n      var predecessors = {};\n      var costs = {};\n      costs[s] = 0;\n      var open = dijkstra.PriorityQueue.make();\n      open.push(s, 0);\n      var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;\n\n      while (!open.empty()) {\n        closest = open.pop();\n        u = closest.value;\n        cost_of_s_to_u = closest.cost;\n        adjacent_nodes = graph[u] || {};\n\n        for (v in adjacent_nodes) {\n          if (adjacent_nodes.hasOwnProperty(v)) {\n            cost_of_e = adjacent_nodes[v];\n            cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n            cost_of_s_to_v = costs[v];\n            first_visit = typeof costs[v] === 'undefined';\n\n            if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n              costs[v] = cost_of_s_to_u_plus_cost_of_e;\n              open.push(v, cost_of_s_to_u_plus_cost_of_e);\n              predecessors[v] = u;\n            }\n          }\n        }\n      }\n\n      if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n        var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n        throw new Error(msg);\n      }\n\n      return predecessors;\n    },\n    extract_shortest_path_from_predecessor_list: function extract_shortest_path_from_predecessor_list(predecessors, d) {\n      var nodes = [];\n      var u = d;\n      var predecessor;\n\n      while (u) {\n        nodes.push(u);\n        predecessor = predecessors[u];\n        u = predecessors[u];\n      }\n\n      nodes.reverse();\n      return nodes;\n    },\n    find_path: function find_path(graph, s, d) {\n      var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n      return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d);\n    },\n    PriorityQueue: {\n      make: function make(opts) {\n        var T = dijkstra.PriorityQueue,\n            t = {},\n            key;\n        opts = opts || {};\n\n        for (key in T) {\n          if (T.hasOwnProperty(key)) {\n            t[key] = T[key];\n          }\n        }\n\n        t.queue = [];\n        t.sorter = opts.sorter || T.default_sorter;\n        return t;\n      },\n      default_sorter: function default_sorter(a, b) {\n        return a.cost - b.cost;\n      },\n      push: function push(value, cost) {\n        var item = {\n          value: value,\n          cost: cost\n        };\n        this.queue.push(item);\n        this.queue.sort(this.sorter);\n      },\n      pop: function pop() {\n        return this.queue.shift();\n      },\n      empty: function empty() {\n        return this.queue.length === 0;\n      }\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = dijkstra;\n  }\n});","map":[[2,0,1,0],[4,0,24,0],[4,6,24,4,"dijkstra"],[4,14,24,12],[4,17,24,15],[5,0,25,2,"single_source_shortest_paths"],[5,4,25,2,"single_source_shortest_paths"],[5,32,25,30],[5,34,25,32],[5,72,25,41,"graph"],[5,77,25,32],[5,79,25,48,"s"],[5,80,25,32],[5,82,25,51,"d"],[5,83,25,32],[5,85,25,54],[6,0,28,4],[6,10,28,8,"predecessors"],[6,22,28,20],[6,25,28,23],[6,27,28,4],[7,0,32,4],[7,10,32,8,"costs"],[7,15,32,13],[7,18,32,16],[7,20,32,4],[8,0,33,4,"costs"],[8,6,33,4,"costs"],[8,11,33,9],[8,12,33,10,"s"],[8,13,33,9],[8,14,33,4],[8,17,33,15],[8,18,33,4],[9,0,39,4],[9,10,39,8,"open"],[9,14,39,12],[9,17,39,15,"dijkstra"],[9,25,39,23],[9,26,39,24,"PriorityQueue"],[9,39,39,15],[9,40,39,38,"make"],[9,44,39,15],[9,46,39,4],[10,0,40,4,"open"],[10,6,40,4,"open"],[10,10,40,8],[10,11,40,9,"push"],[10,15,40,4],[10,16,40,14,"s"],[10,17,40,4],[10,19,40,17],[10,20,40,4],[11,0,42,4],[11,10,42,8,"closest"],[11,17,42,4],[11,19,43,8,"u"],[11,20,42,4],[11,22,43,11,"v"],[11,23,42,4],[11,25,44,8,"cost_of_s_to_u"],[11,39,42,4],[11,41,45,8,"adjacent_nodes"],[11,55,42,4],[11,57,46,8,"cost_of_e"],[11,66,42,4],[11,68,47,8,"cost_of_s_to_u_plus_cost_of_e"],[11,97,42,4],[11,99,48,8,"cost_of_s_to_v"],[11,113,42,4],[11,115,49,8,"first_visit"],[11,126,42,4],[13,0,50,4],[13,13,50,11],[13,14,50,12,"open"],[13,18,50,16],[13,19,50,17,"empty"],[13,24,50,12],[13,26,50,4],[13,28,50,26],[14,0,53,6,"closest"],[14,8,53,6,"closest"],[14,15,53,13],[14,18,53,16,"open"],[14,22,53,20],[14,23,53,21,"pop"],[14,26,53,16],[14,28,53,6],[15,0,54,6,"u"],[15,8,54,6,"u"],[15,9,54,7],[15,12,54,10,"closest"],[15,19,54,17],[15,20,54,18,"value"],[15,25,54,6],[16,0,55,6,"cost_of_s_to_u"],[16,8,55,6,"cost_of_s_to_u"],[16,22,55,20],[16,25,55,23,"closest"],[16,32,55,30],[16,33,55,31,"cost"],[16,37,55,6],[17,0,58,6,"adjacent_nodes"],[17,8,58,6,"adjacent_nodes"],[17,22,58,20],[17,25,58,23,"graph"],[17,30,58,28],[17,31,58,29,"u"],[17,32,58,28],[17,33,58,23],[17,37,58,35],[17,39,58,6],[19,0,63,6],[19,13,63,11,"v"],[19,14,63,6],[19,18,63,16,"adjacent_nodes"],[19,32,63,6],[19,34,63,32],[20,0,64,8],[20,14,64,12,"adjacent_nodes"],[20,28,64,26],[20,29,64,27,"hasOwnProperty"],[20,43,64,12],[20,44,64,42,"v"],[20,45,64,12],[20,46,64,8],[20,48,64,46],[21,0,66,10,"cost_of_e"],[21,12,66,10,"cost_of_e"],[21,21,66,19],[21,24,66,22,"adjacent_nodes"],[21,38,66,36],[21,39,66,37,"v"],[21,40,66,36],[21,41,66,10],[22,0,71,10,"cost_of_s_to_u_plus_cost_of_e"],[22,12,71,10,"cost_of_s_to_u_plus_cost_of_e"],[22,41,71,39],[22,44,71,42,"cost_of_s_to_u"],[22,58,71,56],[22,61,71,59,"cost_of_e"],[22,70,71,10],[23,0,77,10,"cost_of_s_to_v"],[23,12,77,10,"cost_of_s_to_v"],[23,26,77,24],[23,29,77,27,"costs"],[23,34,77,32],[23,35,77,33,"v"],[23,36,77,32],[23,37,77,10],[24,0,78,10,"first_visit"],[24,12,78,10,"first_visit"],[24,23,78,21],[24,26,78,25],[24,33,78,32,"costs"],[24,38,78,37],[24,39,78,38,"v"],[24,40,78,37],[24,41,78,25],[24,46,78,45],[24,57,78,10],[26,0,79,10],[26,16,79,14,"first_visit"],[26,27,79,25],[26,31,79,29,"cost_of_s_to_v"],[26,45,79,43],[26,48,79,46,"cost_of_s_to_u_plus_cost_of_e"],[26,77,79,10],[26,79,79,77],[27,0,80,12,"costs"],[27,14,80,12,"costs"],[27,19,80,17],[27,20,80,18,"v"],[27,21,80,17],[27,22,80,12],[27,25,80,23,"cost_of_s_to_u_plus_cost_of_e"],[27,54,80,12],[28,0,81,12,"open"],[28,14,81,12,"open"],[28,18,81,16],[28,19,81,17,"push"],[28,23,81,12],[28,24,81,22,"v"],[28,25,81,12],[28,27,81,25,"cost_of_s_to_u_plus_cost_of_e"],[28,56,81,12],[29,0,82,12,"predecessors"],[29,14,82,12,"predecessors"],[29,26,82,24],[29,27,82,25,"v"],[29,28,82,24],[29,29,82,12],[29,32,82,30,"u"],[29,33,82,12],[30,0,83,11],[31,0,84,9],[32,0,85,7],[33,0,86,5],[35,0,88,4],[35,10,88,8],[35,17,88,15,"d"],[35,18,88,8],[35,23,88,21],[35,34,88,8],[35,38,88,36],[35,45,88,43,"costs"],[35,50,88,48],[35,51,88,49,"d"],[35,52,88,48],[35,53,88,36],[35,58,88,56],[35,69,88,4],[35,71,88,69],[36,0,89,6],[36,12,89,10,"msg"],[36,15,89,13],[36,18,89,16],[36,19,89,17],[36,48,89,16],[36,50,89,48,"s"],[36,51,89,16],[36,53,89,51],[36,59,89,16],[36,61,89,59,"d"],[36,62,89,16],[36,64,89,62],[36,67,89,16],[36,69,89,67,"join"],[36,73,89,16],[36,74,89,72],[36,76,89,16],[36,77,89,6],[37,0,90,6],[37,14,90,12],[37,18,90,16,"Error"],[37,23,90,12],[37,24,90,22,"msg"],[37,27,90,12],[37,28,90,6],[38,0,91,5],[40,0,93,4],[40,13,93,11,"predecessors"],[40,25,93,4],[41,0,94,3],[41,5,24,15],[42,0,96,2,"extract_shortest_path_from_predecessor_list"],[42,4,96,2,"extract_shortest_path_from_predecessor_list"],[42,47,96,45],[42,49,96,47],[42,102,96,56,"predecessors"],[42,114,96,47],[42,116,96,70,"d"],[42,117,96,47],[42,119,96,73],[43,0,97,4],[43,10,97,8,"nodes"],[43,15,97,13],[43,18,97,16],[43,20,97,4],[44,0,98,4],[44,10,98,8,"u"],[44,11,98,9],[44,14,98,12,"d"],[44,15,98,4],[45,0,99,4],[45,10,99,8,"predecessor"],[45,21,99,4],[47,0,100,4],[47,13,100,11,"u"],[47,14,100,4],[47,16,100,14],[48,0,101,6,"nodes"],[48,8,101,6,"nodes"],[48,13,101,11],[48,14,101,12,"push"],[48,18,101,6],[48,19,101,17,"u"],[48,20,101,6],[49,0,102,6,"predecessor"],[49,8,102,6,"predecessor"],[49,19,102,17],[49,22,102,20,"predecessors"],[49,34,102,32],[49,35,102,33,"u"],[49,36,102,32],[49,37,102,6],[50,0,103,6,"u"],[50,8,103,6,"u"],[50,9,103,7],[50,12,103,10,"predecessors"],[50,24,103,22],[50,25,103,23,"u"],[50,26,103,22],[50,27,103,6],[51,0,104,5],[53,0,105,4,"nodes"],[53,6,105,4,"nodes"],[53,11,105,9],[53,12,105,10,"reverse"],[53,19,105,4],[54,0,106,4],[54,13,106,11,"nodes"],[54,18,106,4],[55,0,107,3],[55,5,24,15],[56,0,109,2,"find_path"],[56,4,109,2,"find_path"],[56,13,109,11],[56,15,109,13],[56,34,109,22,"graph"],[56,39,109,13],[56,41,109,29,"s"],[56,42,109,13],[56,44,109,32,"d"],[56,45,109,13],[56,47,109,35],[57,0,110,4],[57,10,110,8,"predecessors"],[57,22,110,20],[57,25,110,23,"dijkstra"],[57,33,110,31],[57,34,110,32,"single_source_shortest_paths"],[57,62,110,23],[57,63,110,61,"graph"],[57,68,110,23],[57,70,110,68,"s"],[57,71,110,23],[57,73,110,71,"d"],[57,74,110,23],[57,75,110,4],[58,0,111,4],[58,13,111,11,"dijkstra"],[58,21,111,19],[58,22,111,20,"extract_shortest_path_from_predecessor_list"],[58,65,111,11],[58,66,112,6,"predecessors"],[58,78,111,11],[58,80,112,20,"d"],[58,81,111,11],[58,82,111,4],[59,0,113,3],[59,5,24,15],[60,0,118,2,"PriorityQueue"],[60,4,118,2,"PriorityQueue"],[60,17,118,15],[60,19,118,17],[61,0,119,4,"make"],[61,6,119,4,"make"],[61,10,119,8],[61,12,119,10],[61,26,119,20,"opts"],[61,30,119,10],[61,32,119,26],[62,0,120,6],[62,12,120,10,"T"],[62,13,120,11],[62,16,120,14,"dijkstra"],[62,24,120,22],[62,25,120,23,"PriorityQueue"],[62,38,120,6],[63,0,120,6],[63,12,121,10,"t"],[63,13,121,11],[63,16,121,14],[63,18,120,6],[64,0,120,6],[64,12,122,10,"key"],[64,15,120,6],[65,0,123,6,"opts"],[65,8,123,6,"opts"],[65,12,123,10],[65,15,123,13,"opts"],[65,19,123,17],[65,23,123,21],[65,25,123,6],[67,0,124,6],[67,13,124,11,"key"],[67,16,124,6],[67,20,124,18,"T"],[67,21,124,6],[67,23,124,21],[68,0,125,8],[68,14,125,12,"T"],[68,15,125,13],[68,16,125,14,"hasOwnProperty"],[68,30,125,12],[68,31,125,29,"key"],[68,34,125,12],[68,35,125,8],[68,37,125,35],[69,0,126,10,"t"],[69,12,126,10,"t"],[69,13,126,11],[69,14,126,12,"key"],[69,17,126,11],[69,18,126,10],[69,21,126,19,"T"],[69,22,126,20],[69,23,126,21,"key"],[69,26,126,20],[69,27,126,10],[70,0,127,9],[71,0,128,7],[73,0,129,6,"t"],[73,8,129,6,"t"],[73,9,129,7],[73,10,129,8,"queue"],[73,15,129,6],[73,18,129,16],[73,20,129,6],[74,0,130,6,"t"],[74,8,130,6,"t"],[74,9,130,7],[74,10,130,8,"sorter"],[74,16,130,6],[74,19,130,17,"opts"],[74,23,130,21],[74,24,130,22,"sorter"],[74,30,130,17],[74,34,130,32,"T"],[74,35,130,33],[74,36,130,34,"default_sorter"],[74,50,130,6],[75,0,131,6],[75,15,131,13,"t"],[75,16,131,6],[76,0,132,5],[76,7,118,17],[77,0,134,4,"default_sorter"],[77,6,134,4,"default_sorter"],[77,20,134,18],[77,22,134,20],[77,46,134,30,"a"],[77,47,134,20],[77,49,134,33,"b"],[77,50,134,20],[77,52,134,36],[78,0,135,6],[78,15,135,13,"a"],[78,16,135,14],[78,17,135,15,"cost"],[78,21,135,13],[78,24,135,22,"b"],[78,25,135,23],[78,26,135,24,"cost"],[78,30,135,6],[79,0,136,5],[79,7,118,17],[80,0,142,4,"push"],[80,6,142,4,"push"],[80,10,142,8],[80,12,142,10],[80,26,142,20,"value"],[80,31,142,10],[80,33,142,27,"cost"],[80,37,142,10],[80,39,142,33],[81,0,143,6],[81,12,143,10,"item"],[81,16,143,14],[81,19,143,17],[82,0,143,18,"value"],[82,10,143,18,"value"],[82,15,143,23],[82,17,143,25,"value"],[82,22,143,17],[83,0,143,32,"cost"],[83,10,143,32,"cost"],[83,14,143,36],[83,16,143,38,"cost"],[84,0,143,17],[84,9,143,6],[85,0,144,6],[85,13,144,11,"queue"],[85,18,144,6],[85,19,144,17,"push"],[85,23,144,6],[85,24,144,22,"item"],[85,28,144,6],[86,0,145,6],[86,13,145,11,"queue"],[86,18,145,6],[86,19,145,17,"sort"],[86,23,145,6],[86,24,145,22],[86,29,145,27,"sorter"],[86,35,145,6],[87,0,146,5],[87,7,118,17],[88,0,151,4,"pop"],[88,6,151,4,"pop"],[88,9,151,7],[88,11,151,9],[88,26,151,21],[89,0,152,6],[89,15,152,13],[89,20,152,18,"queue"],[89,25,152,13],[89,26,152,24,"shift"],[89,31,152,13],[89,33,152,6],[90,0,153,5],[90,7,118,17],[91,0,155,4,"empty"],[91,6,155,4,"empty"],[91,11,155,9],[91,13,155,11],[91,30,155,23],[92,0,156,6],[92,15,156,13],[92,20,156,18,"queue"],[92,25,156,13],[92,26,156,24,"length"],[92,32,156,13],[92,37,156,35],[92,38,156,6],[93,0,157,5],[94,0,118,17],[95,0,24,15],[95,3,24,0],[97,0,163,0],[97,6,163,4],[97,13,163,11,"module"],[97,19,163,4],[97,24,163,22],[97,35,163,0],[97,37,163,35],[98,0,164,2,"module"],[98,4,164,2,"module"],[98,10,164,8],[98,11,164,9,"exports"],[98,18,164,2],[98,21,164,19,"dijkstra"],[98,29,164,2],[99,0,165,1]]},"type":"js/module"}]}