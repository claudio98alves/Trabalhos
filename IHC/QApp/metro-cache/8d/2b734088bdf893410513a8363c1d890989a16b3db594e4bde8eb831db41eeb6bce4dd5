{"dependencies":[{"name":"./utils","data":{"isAsync":false}},{"name":"./error-correction-code","data":{"isAsync":false}},{"name":"./error-correction-level","data":{"isAsync":false}},{"name":"./mode","data":{"isAsync":false}},{"name":"isarray","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Utils = _$$_REQUIRE(_dependencyMap[0], \"./utils\");\n\n  var ECCode = _$$_REQUIRE(_dependencyMap[1], \"./error-correction-code\");\n\n  var ECLevel = _$$_REQUIRE(_dependencyMap[2], \"./error-correction-level\");\n\n  var Mode = _$$_REQUIRE(_dependencyMap[3], \"./mode\");\n\n  var isArray = _$$_REQUIRE(_dependencyMap[4], \"isarray\");\n\n  var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n  var G18_BCH = Utils.getBCHDigit(G18);\n\n  function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n    for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n      if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n        return currentVersion;\n      }\n    }\n\n    return undefined;\n  }\n\n  function getReservedBitsCount(mode, version) {\n    return Mode.getCharCountIndicator(mode, version) + 4;\n  }\n\n  function getTotalBitsFromDataArray(segments, version) {\n    var totalBits = 0;\n    segments.forEach(function (data) {\n      var reservedBits = getReservedBitsCount(data.mode, version);\n      totalBits += reservedBits + data.getBitsLength();\n    });\n    return totalBits;\n  }\n\n  function getBestVersionForMixedData(segments, errorCorrectionLevel) {\n    for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n      var length = getTotalBitsFromDataArray(segments, currentVersion);\n\n      if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n        return currentVersion;\n      }\n    }\n\n    return undefined;\n  }\n\n  exports.isValid = function isValid(version) {\n    return !isNaN(version) && version >= 1 && version <= 40;\n  };\n\n  exports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n      return parseInt(value, 10);\n    }\n\n    return defaultValue;\n  };\n\n  exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n    if (!exports.isValid(version)) {\n      throw new Error('Invalid QR Code version');\n    }\n\n    if (typeof mode === 'undefined') mode = Mode.BYTE;\n    var totalCodewords = Utils.getSymbolTotalCodewords(version);\n    var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n    var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);\n\n    switch (mode) {\n      case Mode.NUMERIC:\n        return Math.floor(usableBits / 10 * 3);\n\n      case Mode.ALPHANUMERIC:\n        return Math.floor(usableBits / 11 * 2);\n\n      case Mode.KANJI:\n        return Math.floor(usableBits / 13);\n\n      case Mode.BYTE:\n      default:\n        return Math.floor(usableBits / 8);\n    }\n  };\n\n  exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n    var seg;\n    var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n\n    if (isArray(data)) {\n      if (data.length > 1) {\n        return getBestVersionForMixedData(data, ecl);\n      }\n\n      if (data.length === 0) {\n        return 1;\n      }\n\n      seg = data[0];\n    } else {\n      seg = data;\n    }\n\n    return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n  };\n\n  exports.getEncodedBits = function getEncodedBits(version) {\n    if (!exports.isValid(version) || version < 7) {\n      throw new Error('Invalid QR Code version');\n    }\n\n    var d = version << 12;\n\n    while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n      d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n    }\n\n    return version << 12 | d;\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"Utils"],[2,11,1,9],[2,14,1,12,"require"],[2,25,1,19],[2,55,1,0],[4,0,2,0],[4,6,2,4,"ECCode"],[4,12,2,10],[4,15,2,13,"require"],[4,26,2,20],[4,72,2,0],[6,0,3,0],[6,6,3,4,"ECLevel"],[6,13,3,11],[6,16,3,14,"require"],[6,27,3,21],[6,74,3,0],[8,0,4,0],[8,6,4,4,"Mode"],[8,10,4,8],[8,13,4,11,"require"],[8,24,4,18],[8,53,4,0],[10,0,5,0],[10,6,5,4,"isArray"],[10,13,5,11],[10,16,5,14,"require"],[10,27,5,21],[10,57,5,0],[12,0,8,0],[12,6,8,4,"G18"],[12,9,8,7],[12,12,8,11],[12,17,8,16],[12,19,8,10],[12,22,8,23],[12,27,8,28],[12,29,8,10],[12,32,8,35],[12,37,8,40],[12,39,8,10],[12,42,8,47],[12,47,8,52],[12,48,8,10],[12,51,8,58],[12,56,8,63],[12,57,8,10],[12,60,8,69],[12,65,8,74],[12,66,8,10],[12,69,8,80],[12,74,8,85],[12,75,8,10],[12,78,8,91],[12,83,8,96],[12,84,8,0],[13,0,9,0],[13,6,9,4,"G18_BCH"],[13,13,9,11],[13,16,9,14,"Utils"],[13,21,9,19],[13,22,9,20,"getBCHDigit"],[13,33,9,14],[13,34,9,32,"G18"],[13,37,9,14],[13,38,9,0],[15,0,11,0],[15,11,11,9,"getBestVersionForDataLength"],[15,38,11,0],[15,39,11,38,"mode"],[15,43,11,0],[15,45,11,44,"length"],[15,51,11,0],[15,53,11,52,"errorCorrectionLevel"],[15,73,11,0],[15,75,11,74],[16,0,12,2],[16,9,12,7],[16,13,12,11,"currentVersion"],[16,27,12,25],[16,30,12,28],[16,31,12,2],[16,33,12,31,"currentVersion"],[16,47,12,45],[16,51,12,49],[16,53,12,2],[16,55,12,53,"currentVersion"],[16,69,12,67],[16,71,12,2],[16,73,12,71],[17,0,13,4],[17,10,13,8,"length"],[17,16,13,14],[17,20,13,18,"exports"],[17,27,13,25],[17,28,13,26,"getCapacity"],[17,39,13,18],[17,40,13,38,"currentVersion"],[17,54,13,18],[17,56,13,54,"errorCorrectionLevel"],[17,76,13,18],[17,78,13,76,"mode"],[17,82,13,18],[17,83,13,4],[17,85,13,83],[18,0,14,6],[18,15,14,13,"currentVersion"],[18,29,14,6],[19,0,15,5],[20,0,16,3],[22,0,18,2],[22,11,18,9,"undefined"],[22,20,18,2],[23,0,19,1],[25,0,21,0],[25,11,21,9,"getReservedBitsCount"],[25,31,21,0],[25,32,21,31,"mode"],[25,36,21,0],[25,38,21,37,"version"],[25,45,21,0],[25,47,21,46],[26,0,23,2],[26,11,23,9,"Mode"],[26,15,23,13],[26,16,23,14,"getCharCountIndicator"],[26,37,23,9],[26,38,23,36,"mode"],[26,42,23,9],[26,44,23,42,"version"],[26,51,23,9],[26,55,23,53],[26,56,23,2],[27,0,24,1],[29,0,26,0],[29,11,26,9,"getTotalBitsFromDataArray"],[29,36,26,0],[29,37,26,36,"segments"],[29,45,26,0],[29,47,26,46,"version"],[29,54,26,0],[29,56,26,55],[30,0,27,2],[30,8,27,6,"totalBits"],[30,17,27,15],[30,20,27,18],[30,21,27,2],[31,0,29,2,"segments"],[31,4,29,2,"segments"],[31,12,29,10],[31,13,29,11,"forEach"],[31,20,29,2],[31,21,29,19],[31,31,29,29,"data"],[31,35,29,19],[31,37,29,35],[32,0,30,4],[32,10,30,8,"reservedBits"],[32,22,30,20],[32,25,30,23,"getReservedBitsCount"],[32,45,30,43],[32,46,30,44,"data"],[32,50,30,48],[32,51,30,49,"mode"],[32,55,30,43],[32,57,30,55,"version"],[32,64,30,43],[32,65,30,4],[33,0,31,4,"totalBits"],[33,6,31,4,"totalBits"],[33,15,31,13],[33,19,31,17,"reservedBits"],[33,31,31,29],[33,34,31,32,"data"],[33,38,31,36],[33,39,31,37,"getBitsLength"],[33,52,31,32],[33,54,31,4],[34,0,32,3],[34,5,29,2],[35,0,34,2],[35,11,34,9,"totalBits"],[35,20,34,2],[36,0,35,1],[38,0,37,0],[38,11,37,9,"getBestVersionForMixedData"],[38,37,37,0],[38,38,37,37,"segments"],[38,46,37,0],[38,48,37,47,"errorCorrectionLevel"],[38,68,37,0],[38,70,37,69],[39,0,38,2],[39,9,38,7],[39,13,38,11,"currentVersion"],[39,27,38,25],[39,30,38,28],[39,31,38,2],[39,33,38,31,"currentVersion"],[39,47,38,45],[39,51,38,49],[39,53,38,2],[39,55,38,53,"currentVersion"],[39,69,38,67],[39,71,38,2],[39,73,38,71],[40,0,39,4],[40,10,39,8,"length"],[40,16,39,14],[40,19,39,17,"getTotalBitsFromDataArray"],[40,44,39,42],[40,45,39,43,"segments"],[40,53,39,42],[40,55,39,53,"currentVersion"],[40,69,39,42],[40,70,39,4],[42,0,40,4],[42,10,40,8,"length"],[42,16,40,14],[42,20,40,18,"exports"],[42,27,40,25],[42,28,40,26,"getCapacity"],[42,39,40,18],[42,40,40,38,"currentVersion"],[42,54,40,18],[42,56,40,54,"errorCorrectionLevel"],[42,76,40,18],[42,78,40,76,"Mode"],[42,82,40,80],[42,83,40,81,"MIXED"],[42,88,40,18],[42,89,40,4],[42,91,40,89],[43,0,41,6],[43,15,41,13,"currentVersion"],[43,29,41,6],[44,0,42,5],[45,0,43,3],[47,0,45,2],[47,11,45,9,"undefined"],[47,20,45,2],[48,0,46,1],[50,0,54,0,"exports"],[50,2,54,0,"exports"],[50,9,54,7],[50,10,54,8,"isValid"],[50,17,54,0],[50,20,54,18],[50,29,54,27,"isValid"],[50,36,54,18],[50,37,54,36,"version"],[50,44,54,18],[50,46,54,45],[51,0,55,2],[51,11,55,9],[51,12,55,10,"isNaN"],[51,17,55,15],[51,18,55,16,"version"],[51,25,55,15],[51,26,55,9],[51,30,55,28,"version"],[51,37,55,35],[51,41,55,39],[51,42,55,9],[51,46,55,44,"version"],[51,53,55,51],[51,57,55,55],[51,59,55,2],[52,0,56,1],[52,3,54,0],[54,0,66,0,"exports"],[54,2,66,0,"exports"],[54,9,66,7],[54,10,66,8,"from"],[54,14,66,0],[54,17,66,15],[54,26,66,24,"from"],[54,30,66,15],[54,31,66,30,"value"],[54,36,66,15],[54,38,66,37,"defaultValue"],[54,50,66,15],[54,52,66,51],[55,0,67,2],[55,8,67,6,"exports"],[55,15,67,13],[55,16,67,14,"isValid"],[55,23,67,6],[55,24,67,22,"value"],[55,29,67,6],[55,30,67,2],[55,32,67,30],[56,0,68,4],[56,13,68,11,"parseInt"],[56,21,68,19],[56,22,68,20,"value"],[56,27,68,19],[56,29,68,27],[56,31,68,19],[56,32,68,4],[57,0,69,3],[59,0,71,2],[59,11,71,9,"defaultValue"],[59,23,71,2],[60,0,72,1],[60,3,66,0],[62,0,83,0,"exports"],[62,2,83,0,"exports"],[62,9,83,7],[62,10,83,8,"getCapacity"],[62,21,83,0],[62,24,83,22],[62,33,83,31,"getCapacity"],[62,44,83,22],[62,45,83,44,"version"],[62,52,83,22],[62,54,83,53,"errorCorrectionLevel"],[62,74,83,22],[62,76,83,75,"mode"],[62,80,83,22],[62,82,83,81],[63,0,84,2],[63,8,84,6],[63,9,84,7,"exports"],[63,16,84,14],[63,17,84,15,"isValid"],[63,24,84,7],[63,25,84,23,"version"],[63,32,84,7],[63,33,84,2],[63,35,84,33],[64,0,85,4],[64,12,85,10],[64,16,85,14,"Error"],[64,21,85,10],[64,22,85,20],[64,47,85,10],[64,48,85,4],[65,0,86,3],[67,0,89,2],[67,8,89,6],[67,15,89,13,"mode"],[67,19,89,6],[67,24,89,22],[67,35,89,2],[67,37,89,35,"mode"],[67,41,89,39],[67,44,89,42,"Mode"],[67,48,89,46],[67,49,89,47,"BYTE"],[67,53,89,35],[68,0,92,2],[68,8,92,6,"totalCodewords"],[68,22,92,20],[68,25,92,23,"Utils"],[68,30,92,28],[68,31,92,29,"getSymbolTotalCodewords"],[68,54,92,23],[68,55,92,53,"version"],[68,62,92,23],[68,63,92,2],[69,0,95,2],[69,8,95,6,"ecTotalCodewords"],[69,24,95,22],[69,27,95,25,"ECCode"],[69,33,95,31],[69,34,95,32,"getTotalCodewordsCount"],[69,56,95,25],[69,57,95,55,"version"],[69,64,95,25],[69,66,95,64,"errorCorrectionLevel"],[69,86,95,25],[69,87,95,2],[70,0,98,2],[70,8,98,6,"dataTotalCodewordsBits"],[70,30,98,28],[70,33,98,31],[70,34,98,32,"totalCodewords"],[70,48,98,46],[70,51,98,49,"ecTotalCodewords"],[70,67,98,31],[70,71,98,69],[70,72,98,2],[71,0,100,2],[71,8,100,6,"mode"],[71,12,100,10],[71,17,100,15,"Mode"],[71,21,100,19],[71,22,100,20,"MIXED"],[71,27,100,2],[71,29,100,27],[71,36,100,34,"dataTotalCodewordsBits"],[71,58,100,27],[72,0,102,2],[72,8,102,6,"usableBits"],[72,18,102,16],[72,21,102,19,"dataTotalCodewordsBits"],[72,43,102,41],[72,46,102,44,"getReservedBitsCount"],[72,66,102,64],[72,67,102,65,"mode"],[72,71,102,64],[72,73,102,71,"version"],[72,80,102,64],[72,81,102,2],[74,0,105,2],[74,12,105,10,"mode"],[74,16,105,2],[75,0,106,4],[75,11,106,9,"Mode"],[75,15,106,13],[75,16,106,14,"NUMERIC"],[75,23,106,4],[76,0,107,6],[76,15,107,13,"Math"],[76,19,107,17],[76,20,107,18,"floor"],[76,25,107,13],[76,26,107,25,"usableBits"],[76,36,107,35],[76,39,107,38],[76,41,107,24],[76,44,107,44],[76,45,107,13],[76,46,107,6],[78,0,109,4],[78,11,109,9,"Mode"],[78,15,109,13],[78,16,109,14,"ALPHANUMERIC"],[78,28,109,4],[79,0,110,6],[79,15,110,13,"Math"],[79,19,110,17],[79,20,110,18,"floor"],[79,25,110,13],[79,26,110,25,"usableBits"],[79,36,110,35],[79,39,110,38],[79,41,110,24],[79,44,110,44],[79,45,110,13],[79,46,110,6],[81,0,112,4],[81,11,112,9,"Mode"],[81,15,112,13],[81,16,112,14,"KANJI"],[81,21,112,4],[82,0,113,6],[82,15,113,13,"Math"],[82,19,113,17],[82,20,113,18,"floor"],[82,25,113,13],[82,26,113,24,"usableBits"],[82,36,113,34],[82,39,113,37],[82,41,113,13],[82,42,113,6],[84,0,115,4],[84,11,115,9,"Mode"],[84,15,115,13],[84,16,115,14,"BYTE"],[84,20,115,4],[85,0,116,4],[86,0,117,6],[86,15,117,13,"Math"],[86,19,117,17],[86,20,117,18,"floor"],[86,25,117,13],[86,26,117,24,"usableBits"],[86,36,117,34],[86,39,117,37],[86,40,117,13],[86,41,117,6],[87,0,105,2],[88,0,119,1],[88,3,83,0],[90,0,129,0,"exports"],[90,2,129,0,"exports"],[90,9,129,7],[90,10,129,8,"getBestVersionForData"],[90,31,129,0],[90,34,129,32],[90,43,129,41,"getBestVersionForData"],[90,64,129,32],[90,65,129,64,"data"],[90,69,129,32],[90,71,129,70,"errorCorrectionLevel"],[90,91,129,32],[90,93,129,92],[91,0,130,2],[91,8,130,6,"seg"],[91,11,130,2],[92,0,132,2],[92,8,132,6,"ecl"],[92,11,132,9],[92,14,132,12,"ECLevel"],[92,21,132,19],[92,22,132,20,"from"],[92,26,132,12],[92,27,132,25,"errorCorrectionLevel"],[92,47,132,12],[92,49,132,47,"ECLevel"],[92,56,132,54],[92,57,132,55,"M"],[92,58,132,12],[92,59,132,2],[94,0,134,2],[94,8,134,6,"isArray"],[94,15,134,13],[94,16,134,14,"data"],[94,20,134,13],[94,21,134,2],[94,23,134,21],[95,0,135,4],[95,10,135,8,"data"],[95,14,135,12],[95,15,135,13,"length"],[95,21,135,8],[95,24,135,22],[95,25,135,4],[95,27,135,25],[96,0,136,6],[96,15,136,13,"getBestVersionForMixedData"],[96,41,136,39],[96,42,136,40,"data"],[96,46,136,39],[96,48,136,46,"ecl"],[96,51,136,39],[96,52,136,6],[97,0,137,5],[99,0,139,4],[99,10,139,8,"data"],[99,14,139,12],[99,15,139,13,"length"],[99,21,139,8],[99,26,139,24],[99,27,139,4],[99,29,139,27],[100,0,140,6],[100,15,140,13],[100,16,140,6],[101,0,141,5],[103,0,143,4,"seg"],[103,6,143,4,"seg"],[103,9,143,7],[103,12,143,10,"data"],[103,16,143,14],[103,17,143,15],[103,18,143,14],[103,19,143,4],[104,0,144,3],[104,5,134,2],[104,11,144,9],[105,0,145,4,"seg"],[105,6,145,4,"seg"],[105,9,145,7],[105,12,145,10,"data"],[105,16,145,4],[106,0,146,3],[108,0,148,2],[108,11,148,9,"getBestVersionForDataLength"],[108,38,148,36],[108,39,148,37,"seg"],[108,42,148,40],[108,43,148,41,"mode"],[108,47,148,36],[108,49,148,47,"seg"],[108,52,148,50],[108,53,148,51,"getLength"],[108,62,148,47],[108,64,148,36],[108,66,148,64,"ecl"],[108,69,148,36],[108,70,148,2],[109,0,149,1],[109,3,129,0],[111,0,161,0,"exports"],[111,2,161,0,"exports"],[111,9,161,7],[111,10,161,8,"getEncodedBits"],[111,24,161,0],[111,27,161,25],[111,36,161,34,"getEncodedBits"],[111,50,161,25],[111,51,161,50,"version"],[111,58,161,25],[111,60,161,59],[112,0,162,2],[112,8,162,6],[112,9,162,7,"exports"],[112,16,162,14],[112,17,162,15,"isValid"],[112,24,162,7],[112,25,162,23,"version"],[112,32,162,7],[112,33,162,6],[112,37,162,35,"version"],[112,44,162,42],[112,47,162,45],[112,48,162,2],[112,50,162,48],[113,0,163,4],[113,12,163,10],[113,16,163,14,"Error"],[113,21,163,10],[113,22,163,20],[113,47,163,10],[113,48,163,4],[114,0,164,3],[116,0,166,2],[116,8,166,6,"d"],[116,9,166,7],[116,12,166,10,"version"],[116,19,166,17],[116,23,166,21],[116,25,166,2],[118,0,168,2],[118,11,168,9,"Utils"],[118,16,168,14],[118,17,168,15,"getBCHDigit"],[118,28,168,9],[118,29,168,27,"d"],[118,30,168,9],[118,34,168,32,"G18_BCH"],[118,41,168,9],[118,45,168,43],[118,46,168,2],[118,48,168,46],[119,0,169,4,"d"],[119,6,169,4,"d"],[119,7,169,5],[119,11,169,10,"G18"],[119,14,169,13],[119,18,169,18,"Utils"],[119,23,169,23],[119,24,169,24,"getBCHDigit"],[119,35,169,18],[119,36,169,36,"d"],[119,37,169,18],[119,41,169,41,"G18_BCH"],[119,48,169,4],[120,0,170,3],[122,0,172,2],[122,11,172,10,"version"],[122,18,172,17],[122,22,172,21],[122,24,172,9],[122,27,172,27,"d"],[122,28,172,2],[123,0,173,1],[123,3,161,0]]},"type":"js/module"}]}