{"dependencies":[{"name":"./mode","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Mode = _$$_REQUIRE(_dependencyMap[0], \"./mode\");\n\n  function NumericData(data) {\n    this.mode = Mode.NUMERIC;\n    this.data = data.toString();\n  }\n\n  NumericData.getBitsLength = function getBitsLength(length) {\n    return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n  };\n\n  NumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n  };\n\n  NumericData.prototype.getBitsLength = function getBitsLength() {\n    return NumericData.getBitsLength(this.data.length);\n  };\n\n  NumericData.prototype.write = function write(bitBuffer) {\n    var i, group, value;\n\n    for (i = 0; i + 3 <= this.data.length; i += 3) {\n      group = this.data.substr(i, 3);\n      value = parseInt(group, 10);\n      bitBuffer.put(value, 10);\n    }\n\n    var remainingNum = this.data.length - i;\n\n    if (remainingNum > 0) {\n      group = this.data.substr(i);\n      value = parseInt(group, 10);\n      bitBuffer.put(value, remainingNum * 3 + 1);\n    }\n  };\n\n  module.exports = NumericData;\n});","map":[[2,0,1,0],[2,6,1,4,"Mode"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,53,1,0],[4,0,3,0],[4,11,3,9,"NumericData"],[4,22,3,0],[4,23,3,22,"data"],[4,27,3,0],[4,29,3,28],[5,0,4,2],[5,9,4,7,"mode"],[5,13,4,2],[5,16,4,14,"Mode"],[5,20,4,18],[5,21,4,19,"NUMERIC"],[5,28,4,2],[6,0,5,2],[6,9,5,7,"data"],[6,13,5,2],[6,16,5,14,"data"],[6,20,5,18],[6,21,5,19,"toString"],[6,29,5,14],[6,31,5,2],[7,0,6,1],[9,0,8,0,"NumericData"],[9,2,8,0,"NumericData"],[9,13,8,11],[9,14,8,12,"getBitsLength"],[9,27,8,0],[9,30,8,28],[9,39,8,37,"getBitsLength"],[9,52,8,28],[9,53,8,52,"length"],[9,59,8,28],[9,61,8,60],[10,0,9,2],[10,11,9,9],[10,16,9,14,"Math"],[10,20,9,18],[10,21,9,19,"floor"],[10,26,9,14],[10,27,9,25,"length"],[10,33,9,31],[10,36,9,34],[10,37,9,14],[10,38,9,9],[10,42,9,41,"length"],[10,48,9,47],[10,51,9,50],[10,52,9,40],[10,55,9,57,"length"],[10,61,9,63],[10,64,9,66],[10,65,9,56],[10,68,9,71],[10,69,9,56],[10,72,9,75],[10,73,9,40],[10,76,9,80],[10,77,9,9],[10,78,9,2],[11,0,10,1],[11,3,8,0],[13,0,12,0,"NumericData"],[13,2,12,0,"NumericData"],[13,13,12,11],[13,14,12,12,"prototype"],[13,23,12,0],[13,24,12,22,"getLength"],[13,33,12,0],[13,36,12,34],[13,45,12,43,"getLength"],[13,54,12,34],[13,57,12,56],[14,0,13,2],[14,11,13,9],[14,16,13,14,"data"],[14,20,13,9],[14,21,13,19,"length"],[14,27,13,2],[15,0,14,1],[15,3,12,0],[17,0,16,0,"NumericData"],[17,2,16,0,"NumericData"],[17,13,16,11],[17,14,16,12,"prototype"],[17,23,16,0],[17,24,16,22,"getBitsLength"],[17,37,16,0],[17,40,16,38],[17,49,16,47,"getBitsLength"],[17,62,16,38],[17,65,16,64],[18,0,17,2],[18,11,17,9,"NumericData"],[18,22,17,20],[18,23,17,21,"getBitsLength"],[18,36,17,9],[18,37,17,35],[18,42,17,40,"data"],[18,46,17,35],[18,47,17,45,"length"],[18,53,17,9],[18,54,17,2],[19,0,18,1],[19,3,16,0],[21,0,20,0,"NumericData"],[21,2,20,0,"NumericData"],[21,13,20,11],[21,14,20,12,"prototype"],[21,23,20,0],[21,24,20,22,"write"],[21,29,20,0],[21,32,20,30],[21,41,20,39,"write"],[21,46,20,30],[21,47,20,46,"bitBuffer"],[21,56,20,30],[21,58,20,57],[22,0,21,2],[22,8,21,6,"i"],[22,9,21,2],[22,11,21,9,"group"],[22,16,21,2],[22,18,21,16,"value"],[22,23,21,2],[24,0,25,2],[24,9,25,7,"i"],[24,10,25,8],[24,13,25,11],[24,14,25,2],[24,16,25,14,"i"],[24,17,25,15],[24,20,25,18],[24,21,25,14],[24,25,25,23],[24,30,25,28,"data"],[24,34,25,23],[24,35,25,33,"length"],[24,41,25,2],[24,43,25,41,"i"],[24,44,25,42],[24,48,25,46],[24,49,25,2],[24,51,25,49],[25,0,26,4,"group"],[25,6,26,4,"group"],[25,11,26,9],[25,14,26,12],[25,19,26,17,"data"],[25,23,26,12],[25,24,26,22,"substr"],[25,30,26,12],[25,31,26,29,"i"],[25,32,26,12],[25,34,26,32],[25,35,26,12],[25,36,26,4],[26,0,27,4,"value"],[26,6,27,4,"value"],[26,11,27,9],[26,14,27,12,"parseInt"],[26,22,27,20],[26,23,27,21,"group"],[26,28,27,20],[26,30,27,28],[26,32,27,20],[26,33,27,4],[27,0,29,4,"bitBuffer"],[27,6,29,4,"bitBuffer"],[27,15,29,13],[27,16,29,14,"put"],[27,19,29,4],[27,20,29,18,"value"],[27,25,29,4],[27,27,29,25],[27,29,29,4],[28,0,30,3],[30,0,34,2],[30,8,34,6,"remainingNum"],[30,20,34,18],[30,23,34,21],[30,28,34,26,"data"],[30,32,34,21],[30,33,34,31,"length"],[30,39,34,21],[30,42,34,40,"i"],[30,43,34,2],[32,0,35,2],[32,8,35,6,"remainingNum"],[32,20,35,18],[32,23,35,21],[32,24,35,2],[32,26,35,24],[33,0,36,4,"group"],[33,6,36,4,"group"],[33,11,36,9],[33,14,36,12],[33,19,36,17,"data"],[33,23,36,12],[33,24,36,22,"substr"],[33,30,36,12],[33,31,36,29,"i"],[33,32,36,12],[33,33,36,4],[34,0,37,4,"value"],[34,6,37,4,"value"],[34,11,37,9],[34,14,37,12,"parseInt"],[34,22,37,20],[34,23,37,21,"group"],[34,28,37,20],[34,30,37,28],[34,32,37,20],[34,33,37,4],[35,0,39,4,"bitBuffer"],[35,6,39,4,"bitBuffer"],[35,15,39,13],[35,16,39,14,"put"],[35,19,39,4],[35,20,39,18,"value"],[35,25,39,4],[35,27,39,25,"remainingNum"],[35,39,39,37],[35,42,39,40],[35,43,39,25],[35,46,39,44],[35,47,39,4],[36,0,40,3],[37,0,41,1],[37,3,20,0],[39,0,43,0,"module"],[39,2,43,0,"module"],[39,8,43,6],[39,9,43,7,"exports"],[39,16,43,0],[39,19,43,17,"NumericData"],[39,30,43,0]]},"type":"js/module"}]}