{
  "@react-native-community/bob": {
    "output": "lib",
    "source": "src",
    "targets": [
      "commonjs",
      "module",
      "typescript"
    ]
  },
  "_from": "react-native-svg@9.9.2",
  "_id": "react-native-svg@9.9.2",
  "_inBundle": false,
  "_integrity": "sha512-vA1m7FjqUJd+tjrwt0qIFunfbGMUqc+l7RP4ZNGsYxrJDXJnVA/8CAwsFvxOxtNI/V4xk+Fhv+I3Gd12CWIt/A==",
  "_location": "/react-native-svg",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-native-svg",
    "fetchSpec": "9.9.2",
    "name": "react-native-svg",
    "raw": "react-native-svg@9.9.2",
    "rawSpec": "9.9.2",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-svg/-/react-native-svg-9.9.2.tgz",
  "_shasum": "33085e2b6da7a540311f5a39acb0a1366d3ee020",
  "_spec": "react-native-svg@9.9.2",
  "_where": "/home/miguel/TransferÃªncias/qapp/QApp",
  "bugs": {
    "url": "https://github.com/react-native-community/react-native-svg/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "SVG library for react-native",
  "devDependencies": {
    "@react-native-community/bob": "^0.7.0",
    "@react-native-community/eslint-config": "^0.0.5",
    "@types/react": "^16.9.2",
    "@types/react-native": "^0.60.12",
    "babel-eslint": "^10.0.3",
    "eslint": "^6.2.2",
    "eslint-plugin-prettier": "^3.1.0",
    "eslint-plugin-react": "^7.14.3",
    "pegjs": "^0.10.0",
    "prettier": "^1.18.2",
    "react": "^16.9.0",
    "semantic-release": "^15.13.24",
    "semantic-release-cli": "^5.2.1",
    "typescript": "^3.6.2"
  },
  "homepage": "https://github.com/react-native-community/react-native-svg",
  "keywords": [
    "ART",
    "SVG",
    "VML",
    "android",
    "gradient",
    "ios",
    "react-component",
    "react-native"
  ],
  "license": "MIT",
  "main": "lib/commonjs/index.js",
  "module": "lib/module/index.js",
  "name": "react-native-svg",
  "nativePackage": true,
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "*",
    "react-native": ">=0.50.0"
  },
  "react-native": "src/index.ts",
  "readme": "## react-native-svg\n\n[![Version](https://img.shields.io/npm/v/react-native-svg.svg)](https://www.npmjs.com/package/react-native-svg)\n[![NPM](https://img.shields.io/npm/dm/react-native-svg.svg)](https://www.npmjs.com/package/react-native-svg)\n\n`react-native-svg` provides SVG support to React Native on iOS and Android, and a compatibility layer for the web.\n\n[Check out the demo](https://snack.expo.io/@msand/react-native-svg-example)\n\n## Features\n\n1. Supports most SVG elements and properties (Rect, Circle, Line, Polyline, Polygon, G ...).\n2. Easy to [convert SVG code](https://svgr.now.sh/) to react-native-svg.\n\n- [Installation](#installation)\n  - [Automatically](#automatically)\n  - [Manually](#manually)\n    - [Android](#android-pre-rn-060)\n    - [iOS](#ios-pre-rn-060)\n- [Troubleshooting](#troubleshooting)\n- [Opening issues](#opening-issues)\n- [Usage](#usage)\n  - [Use with content loaded from uri](#use-with-content-loaded-from-uri)\n  - [Use with svg files](#use-with-svg-files)\n  - [Use with xml strings](#use-with-xml-strings)\n- [Common props](#common-props)\n- [Supported elements](#supported-elements)\n  - [Svg](#svg)\n  - [Rect](#rect)\n  - [Circle](#circle)\n  - [Ellipse](#ellipse)\n  - [Line](#line)\n  - [Polygon](#polygon)\n  - [Polyline](#polyline)\n  - [Path](#path)\n  - [Text](#text)\n  - [TSpan](#tspan)\n  - [TextPath](#textpath)\n  - [G](#g)\n  - [Use](#use)\n  - [Symbol](#symbol)\n  - [Defs](#defs)\n  - [Image](#image)\n  - [ClipPath](#clippath)\n  - [LinearGradient](#lineargradient)\n  - [RadialGradient](#radialgradient)\n  - [Mask](#mask)\n  - [Pattern](#pattern)\n- [Touch Events](#touch-events)\n- [Run example](#run-example)\n- [TODO](#todo)\n- [Known issues](#known-issues)\n\n### Installation\n\n#### Automatically\n\n_With Expo, this is pre-installed. Jump ahead to [Usage](#Usage)_\n\n1. Install library from `npm`\n\n   ```bash\n   yarn add react-native-svg\n   ```\n\n2. Link native code\n\n   With autolinking (react-native 0.60+)\n\n   ```bash\n   cd ios && pod install\n   ```\n\n   Pre 0.60\n\n   ```bash\n   react-native link react-native-svg\n   ```\n\n# NOTICE:\n\nDue to breaking changes in react-native, the version given in the left column\n(and higher versions) of react-native-svg only supports the react-native version\nin the right column (and higher versions, if possible).\n\nIt is recommended to use the version of react given in the peer dependencies\nof the react-native version you are using.\n\nThe latest version of react-native-svg should always work in a clean react-native project.\n\n| react-native-svg | react-native |\n| ---------------- | ------------ |\n| 3.2.0            | 0.29         |\n| 4.2.0            | 0.32         |\n| 4.3.0            | 0.33         |\n| 4.4.0            | 0.38         |\n| 4.5.0            | 0.40         |\n| 5.1.8            | 0.44         |\n| 5.2.0            | 0.45         |\n| 5.3.0            | 0.46         |\n| 5.4.1            | 0.47         |\n| 5.5.1            | >=0.50       |\n| >=6              | >=0.50       |\n| >=7              | >=0.57.4     |\n| >=8              | >=0.57.4     |\n| >=9              | >=0.57.4     |\n\nOr, include [this PR](https://github.com/facebook/react-native/pull/17842) manually for v7+ stability on android for older RN ( [included in 0.57-stable](https://github.com/facebook/react-native/commit/d9f5319cf0d9828b29d0e350284b22ce29985042) and newer).\n\nThe latest version of v6, v7, v8 and v9 should all work in the latest react-native version.\n\nv7 and newer requires the patch for making android thread safe, to get native animation support.\n\n#### Manually\n\n##### Android pre RN 0.60\n\n1. `yarn add react-native-svg` In RN 0.60+, this is all you should ever need to do get Android working. Before this, react-native link was responsible for the following steps:\n\n2. Append the following lines to `android/settings.gradle`:\n\n   ```gradle\n   include ':react-native-svg'\n   project(':react-native-svg').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-svg/android')\n   ```\n\n3. Insert the following lines inside the dependencies block in `android/app/build.gradle`:\n\n   ```gradle\n   implementation project(':react-native-svg')\n   ```\n\n4. Open up `android/app/src/main/java/[...]/MainApplication.java`\n\n- Add `import com.horcrux.svg.SvgPackage;` to the imports at the top of the file\n- Add `new SvgPackage()` to the list returned by the `getPackages()` method. Add a comma to the previous item if there's already something there.\n\n##### iOS pre RN 0.60\n\n[Manual linking](http://facebook.github.io/react-native/docs/linking-libraries-ios.html#manual-linking)\n\nTo install react-native-svg on iOS visit the link referenced above or do the following (react-native link should do this for you):\n\n1. Open your project in XCode and drag the `RNSVG.xcodeproj` file (located in `.../node_modules/react-native-svg/ios`) into the Libraries directory shown in XCode.\n2. Expand the `RNSVG.xcodeproj` file you just added to XCode until you see: `libRNSVG.a` (located in `RNSVG.xcodeproj` > `Products` )\n3. Drag `libRNSVG.a` into the Link Binary With Libraries section (located in Build Phases which may be found at the top of the XCode window)\n\n###### CocoaPods\n\nAlternatively, you can use [CocoaPods](https://cocoapods.org/) to manage your native (Objective-C and Swift) dependencies:\n\n1. Add RNSVG to your Podfile (with RN 0.60+ autolinking, this is not needed)\n\n```ruby\npod 'RNSVG', :path => '../node_modules/react-native-svg'\n```\n\nIf `cocoapods` is used and if error `RNSVGImage.m:12:9: 'React/RCTImageLoader.h' file not found` occurs:\n\nAdd the following entry in Podfile:\n\n```ruby\n    pod 'React', :path => '../node_modules/react-native', :subspecs => [\n        [...]\n        'RCTImage', # <-- Add RCTImage\n    ]\n```\n\nand run `pod install` from `ios` folder\n\n### Troubleshooting\n\n#### Problems with Proguard\n\nWhen Proguard is enabled (which it is by default for Android release builds), it causes runtine error\nTo avoid this, add an exception to `android/app/proguard-rules.pro`:\n\n```bash\n-keep public class com.horcrux.svg.** {*;}\n```\n\nIf you have build errors, then it might be caused by caching issues, please try:\n\n```bash\nwatchman watch-del-all\nrm -fr $TMPDIR/react-*\nreact-native start --reset-cache\n\nOr,\n\nrm -rf node_modules\nyarn\nreact-native start --reset-cache\n```\n\n#### Unexpected behavior\n\nIf you have unexpected behavior, please create a clean project with the latest versions of react-native and react-native-svg\n\n```bash\nreact-native init CleanProject\ncd CleanProject/\nyarn add react-native-svg\ncd ios && pod install && cd ..\n```\n\nMake a reproduction of the problem in `App.js`\n\n```bash\nreact-native run-ios\nreact-native run-android\n```\n\n# Opening issues\n\nVerify that it is still an issue with the latest version as specified in the previous step. If so, open a new issue, include the entire `App.js` file, specify what platforms you've tested, and the results of running this command:\n\n```bash\nreact-native info\n```\n\nIf you suspect that you've found a spec conformance bug, then you can test using your component in a react-native-web project by forking this codesandbox, to see how different browsers render the same content: <https://codesandbox.io/s/pypn6mn3y7> If any evergreen brower with significant userbase or other svg user agent renders some svg content better, or supports more of the svg and related specs, please open an issue asap.\n\n### <a name=\"Usage\">Usage</a>\n\nHere's a simple example. To render output like this:\n\n![SVG example](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/svg.png)\n\nUse the following code:\n\n```jsx\nimport Svg, {\n  Circle,\n  Ellipse,\n  G,\n  Text,\n  TSpan,\n  TextPath,\n  Path,\n  Polygon,\n  Polyline,\n  Line,\n  Rect,\n  Use,\n  Image,\n  Symbol,\n  Defs,\n  LinearGradient,\n  RadialGradient,\n  Stop,\n  ClipPath,\n  Pattern,\n  Mask,\n} from 'react-native-svg';\n\n/* Use this if you are using Expo\nimport { Svg } from 'expo';\nconst { Circle, Rect } = Svg;\n*/\n\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nexport default class SvgExample extends React.Component {\n  render() {\n    return (\n      <View\n        style={[\n          StyleSheet.absoluteFill,\n          { alignItems: 'center', justifyContent: 'center' },\n        ]}\n      >\n        <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\">\n          <Circle\n            cx=\"50\"\n            cy=\"50\"\n            r=\"45\"\n            stroke=\"blue\"\n            strokeWidth=\"2.5\"\n            fill=\"green\"\n          />\n          <Rect\n            x=\"15\"\n            y=\"15\"\n            width=\"70\"\n            height=\"70\"\n            stroke=\"red\"\n            strokeWidth=\"2\"\n            fill=\"yellow\"\n          />\n        </Svg>\n      </View>\n    );\n  }\n}\n```\n\n[Try this on Snack](https://snack.expo.io/@msand/react-native-svg-example)\n\n### Use with content loaded from uri\n\n```jsx\nimport * as React from 'react';\nimport { SvgUri } from 'react-native-svg';\n\nexport default () => (\n  <SvgUri\n    width=\"100%\"\n    height=\"100%\"\n    uri=\"http://thenewcode.com/assets/images/thumbnails/homer-simpson.svg\"\n  />\n);\n```\n\n### Use with svg files\n\nTry [react-native-svg-transformer](https://github.com/kristerkari/react-native-svg-transformer) to get compile time conversion and cached transformations.\n<https://github.com/kristerkari/react-native-svg-transformer#installation-and-configuration>\n<https://github.com/kristerkari/react-native-svg-transformer#for-react-native-v057-or-newer--expo-sdk-v3100-or-newer>\n\n`metro.config.js`\n\n```js\nconst { getDefaultConfig } = require('metro-config');\n\nmodule.exports = (async () => {\n  const {\n    resolver: { sourceExts, assetExts },\n  } = await getDefaultConfig();\n  return {\n    transformer: {\n      babelTransformerPath: require.resolve('react-native-svg-transformer'),\n    },\n    resolver: {\n      assetExts: assetExts.filter(ext => ext !== 'svg'),\n      sourceExts: [...sourceExts, 'svg'],\n    },\n  };\n})();\n```\n\nImport your .svg file inside a React component:\n\n```jsx\nimport Logo from './logo.svg';\n```\n\nYou can then use your image as a component:\n\n```jsx\n<Logo width={120} height={40} />\n```\n\nAlternatively, you can use SvgXml with [babel-plugin-inline-import](https://github.com/credcollective/babel-plugin-inline-import/), but with transforms done at run-time.\n\n.babelrc\n\n```json\n{\n  \"presets\": [\"module:metro-react-native-babel-preset\"],\n  \"plugins\": [\n    [\n      \"babel-plugin-inline-import\",\n      {\n        \"extensions\": [\".svg\"]\n      }\n    ]\n  ]\n}\n```\n\nApp.js\n\n```jsx\nimport * as React from 'react';\nimport { SvgXml } from 'react-native-svg';\nimport testSvg from './test.svg';\nexport default () => <SvgXml width=\"200\" height=\"200\" xml={testSvg} />;\n```\n\n### Use with xml strings\n\n```jsx\nimport * as React from 'react';\nimport { SvgXml } from 'react-native-svg';\n\nconst xml = `\n  <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      fill=\"url(#gradient)\"\n      d=\"M4 0C1.79086 0 0 1.79086 0 4V28C0 30.2091 1.79086 32 4 32H28C30.2091 32 32 30.2091 32 28V4C32 1.79086 30.2091 0 28 0H4ZM17 6C17 5.44772 17.4477 5 18 5H20C20.5523 5 21 5.44772 21 6V25C21 25.5523 20.5523 26 20 26H18C17.4477 26 17 25.5523 17 25V6ZM12 11C11.4477 11 11 11.4477 11 12V25C11 25.5523 11.4477 26 12 26H14C14.5523 26 15 25.5523 15 25V12C15 11.4477 14.5523 11 14 11H12ZM6 18C5.44772 18 5 18.4477 5 19V25C5 25.5523 5.44772 26 6 26H8C8.55228 26 9 25.5523 9 25V19C9 18.4477 8.55228 18 8 18H6ZM24 14C23.4477 14 23 14.4477 23 15V25C23 25.5523 23.4477 26 24 26H26C26.5523 26 27 25.5523 27 25V15C27 14.4477 26.5523 14 26 14H24Z\"\n    />\n    <defs>\n      <linearGradient\n        id=\"gradient\"\n        x1=\"0\"\n        y1=\"0\"\n        x2=\"8.46631\"\n        y2=\"37.3364\"\n        gradient-units=\"userSpaceOnUse\">\n        <stop offset=\"0\" stop-color=\"#FEA267\" />\n        <stop offset=\"1\" stop-color=\"#E75A4C\" />\n      </linearGradient>\n    </defs>\n  </svg>\n`;\n\nexport default () => <SvgXml xml={xml} width=\"100%\" height=\"100%\" />;\n```\n\n### Common props:\n\n| Name             | Default  | Description                                                                                                                                                            |\n| ---------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| fill             | '#000'   | The fill prop refers to the color inside the shape.                                                                                                                    |\n| fillOpacity      | 1        | This prop specifies the opacity of the color or the content the current object is filled with.                                                                         |\n| fillRule         | nonzero  | The fillRule prop determines what side of a path is inside a shape, which determines how fill will paint the shape, can be `nonzero` or `evenodd`                      |\n| stroke           | 'none'   | The stroke prop controls how the outline of a shape appears.                                                                                                           |\n| strokeWidth      | 1        | The strokeWidth prop specifies the width of the outline on the current object.                                                                                         |\n| strokeOpacity    | 1        | The strokeOpacity prop specifies the opacity of the outline on the current object.                                                                                     |\n| strokeLinecap    | 'square' | The strokeLinecap prop specifies the shape to be used at the end of open subpaths when they are stroked. Can be either `'butt'`, `'square'` or `'round'`.              |\n| strokeLinejoin   | 'miter'  | The strokeLinejoin prop specifies the shape to be used at the corners of paths or basic shapes when they are stroked. Can be either `'miter'`, `'bevel'` or `'round'`. |\n| strokeDasharray  | []       | The strokeDasharray prop controls the pattern of dashes and gaps used to stroke paths.                                                                                 |\n| strokeDashoffset | null     | The strokeDashoffset prop specifies the distance into the dash pattern to start the dash.                                                                              |\n| x                | 0        | Translate distance on x-axis.                                                                                                                                          |\n| y                | 0        | Translate distance on y-axis.                                                                                                                                          |\n| rotation         | 0        | Rotation degree value on the current object.                                                                                                                           |\n| scale            | 1        | Scale value on the current object.                                                                                                                                     |\n| origin           | 0, 0     | Transform origin coordinates for the current object.                                                                                                                   |\n| originX          | 0        | Transform originX coordinates for the current object.                                                                                                                  |\n| originY          | 0        | Transform originY coordinates for the current object.                                                                                                                  |\n\n### Supported elements:\n\n#### Svg\n\n```jsx\n<Svg height=\"100\" width=\"100\">\n  <Rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"black\" />\n  <Circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"yellow\" />\n  <Circle cx=\"40\" cy=\"40\" r=\"4\" fill=\"black\" />\n  <Circle cx=\"60\" cy=\"40\" r=\"4\" fill=\"black\" />\n  <Path d=\"M 40 60 A 10 10 0 0 0 60 60\" stroke=\"black\" />\n</Svg>\n```\n\nColors set in the Svg element are inherited by its children:\n\n```jsx\n<Svg\n  width=\"130\"\n  height=\"130\"\n  fill=\"blue\"\n  stroke=\"red\"\n  color=\"green\"\n  viewBox=\"-16 -16 544 544\"\n>\n  <Path\n    d=\"M318.37,85.45L422.53,190.11,158.89,455,54.79,350.38ZM501.56,60.2L455.11,13.53a45.93,45.93,0,0,0-65.11,0L345.51,58.24,449.66,162.9l51.9-52.15A35.8,35.8,0,0,0,501.56,60.2ZM0.29,497.49a11.88,11.88,0,0,0,14.34,14.17l116.06-28.28L26.59,378.72Z\"\n    strokeWidth=\"32\"\n  />\n  <Path d=\"M0,0L512,512\" stroke=\"currentColor\" strokeWidth=\"32\" />\n</Svg>\n```\n\n![Pencil](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/pencil.png)\n\nCode explanation:\n\n- The fill prop defines the color inside the object.\n- The stroke prop defines the color of the line drawn around the object.\n- The color prop is a bit special in the sense that it won't color anything by itself, but define a kind of color variable that can be used by children elements. In this example we're defining a \"green\" color in the Svg element and using it in the second Path element via stroke=\"currentColor\". The \"currentColor\" is what refers to that \"green\" value, and it can be used in other props that accept colors too, e.g. fill=\"currentColor\".\n\n### Rect\n\nThe <Rect> element is used to create a rectangle and variations of a rectangle shape:\n\n```jsx\n<Svg width=\"200\" height=\"60\">\n  <Rect\n    x=\"25\"\n    y=\"5\"\n    width=\"150\"\n    height=\"50\"\n    fill=\"rgb(0,0,255)\"\n    strokeWidth=\"3\"\n    stroke=\"rgb(0,0,0)\"\n  />\n</Svg>\n```\n\n![Rect](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/rect.png)\n\nCode explanation:\n\n- The width and height props of the <Rect> element define the height and the width of the rectangle.\n- The x prop defines the left position of the rectangle (e.g. x=\"25\" places the rectangle 25 px from the left margin).\n- The y prop defines the top position of the rectangle (e.g. y=\"5\" places the rectangle 5 px from the top margin).\n\n##### Circle\n\nThe <Circle> element is used to create a circle:\n\n```jsx\n<Svg height=\"100\" width=\"100\">\n  <Circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"pink\" />\n</Svg>\n```\n\n![Rect](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/circle.png)\n\nCode explanation:\n\n- The cx and cy props define the x and y coordinates of the center of the circle. If cx and cy are omitted, the circle's center is set to (0,0)\n- The r prop defines the radius of the circle\n\n#### Ellipse\n\nThe <Ellipse> element is used to create an ellipse.\n\nAn ellipse is closely related to a circle. The difference is that an ellipse has an x and a y radius that differs from each other, while a circle has equal x and y radius.\n\n```jsx\n<Svg height=\"100\" width=\"110\">\n  <Ellipse\n    cx=\"55\"\n    cy=\"55\"\n    rx=\"50\"\n    ry=\"30\"\n    stroke=\"purple\"\n    strokeWidth=\"2\"\n    fill=\"yellow\"\n  />\n</Svg>\n```\n\n![Rect](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/ellipse.png)\n\nCode explanation:\n\n- The cx prop defines the x coordinate of the center of the ellipse\n- The cy prop defines the y coordinate of the center of the ellipse\n- The rx prop defines the horizontal radius\n- The ry prop defines the vertical radius\n\n#### Line\n\nThe <Line> element is an SVG basic shape, used to create a line connecting two points.\n\n```jsx\n<Svg height=\"100\" width=\"100\">\n  <Line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"100\" stroke=\"red\" strokeWidth=\"2\" />\n</Svg>\n```\n\n![Rect](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/line.png)\n\nCode explanation:\n\n- The x1 prop defines the start of the line on the x-axis.\n- The y1 prop defines the start of the line on the y-axis.\n- The x2 prop defines the end of the line on the x-axis.\n- The y2 prop defines the end of the line on the y-axis.\n\n#### Polygon\n\nThe <Polygon> element is used to create a graphic that contains at least three sides. Polygons are made of straight lines, and the shape is \"closed\" (all the lines connect up).\n\n```jsx\n<Svg height=\"100\" width=\"100\">\n  <Polygon\n    points=\"40,5 70,80 25,95\"\n    fill=\"lime\"\n    stroke=\"purple\"\n    strokeWidth=\"1\"\n  />\n</Svg>\n```\n\n![Rect](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/polygon.png)\n\nCode explanation:\n\n- The points prop defines the x and y coordinates for each corner of the polygon\n\n#### Polyline\n\nThe <Polyline> element is used to create any shape that consists of only straight lines:\n\n```jsx\n<Svg height=\"100\" width=\"100\">\n  <Polyline\n    points=\"10,10 20,12 30,20 40,60 60,70 95,90\"\n    fill=\"none\"\n    stroke=\"black\"\n    strokeWidth=\"3\"\n  />\n</Svg>\n```\n\n![Rect](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/polyline.png)\n\nCode explanation:\n\n- The points prop defines the x and y coordinates for each point of the polyline\n\n#### Path\n\nThe <Path> element is used to define a path.\n\nThe following commands are available for path data:\n\n- M = moveto\n- L = lineto\n- H = horizontal lineto\n- V = vertical lineto\n- C = curveto\n- S = smooth curveto\n- Q = quadratic BÃ©zier curve\n- T = smooth quadratic BÃ©zier curveto\n- A = elliptical Arc\n- Z = closepath\n\n`Note:` All of the commands above can also be expressed with lower letters. Capital letters means absolutely positioned, lower cases means relatively positioned. See [Path document of SVG](https://www.w3.org/TR/SVG/paths.html) to know parameters for each command.\n\n```jsx\n<Svg height=\"100\" width=\"100\">\n  <Path\n    d=\"M25 10 L98 65 L70 25 L16 77 L11 30 L0 4 L90 50 L50 10 L11 22 L77 95 L20 25\"\n    fill=\"none\"\n    stroke=\"red\"\n  />\n</Svg>\n```\n\n![Rect](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/path.png)\n\n#### Text\n\nThe <Text> element is used to define text.\n\n```jsx\n<Svg height=\"60\" width=\"200\">\n  <Text\n    fill=\"none\"\n    stroke=\"purple\"\n    fontSize=\"20\"\n    fontWeight=\"bold\"\n    x=\"100\"\n    y=\"20\"\n    textAnchor=\"middle\"\n  >\n    STROKED TEXT\n  </Text>\n</Svg>\n```\n\n![Text](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/text.png)\n\n#### TSpan\n\nThe <TSpan> element is used to draw multiple lines of text in SVG. Rather than having to position each line of text absolutely, the <TSpan> element makes it possible to position a line of text relatively to the previous line of text.\n\n```jsx\n<Svg height=\"160\" width=\"200\">\n  <Text y=\"20\" dx=\"5 5\">\n    <TSpan x=\"10\">tspan line 1</TSpan>\n    <TSpan x=\"10\" dy=\"15\">\n      tspan line 2\n    </TSpan>\n    <TSpan x=\"10\" dx=\"10\" dy=\"15\">\n      tspan line 3\n    </TSpan>\n  </Text>\n  <Text x=\"10\" y=\"60\" fill=\"red\" fontSize=\"14\">\n    <TSpan dy=\"5 10 20\">12345</TSpan>\n    <TSpan fill=\"blue\" dy=\"15\" dx=\"0 5 5\">\n      <TSpan>6</TSpan>\n      <TSpan>7</TSpan>\n    </TSpan>\n    <TSpan dx=\"0 10 20\" dy=\"0 20\" fontWeight=\"bold\" fontSize=\"12\">\n      89a\n    </TSpan>\n  </Text>\n  <Text y=\"140\" dx=\"0 5 5\" dy=\"0 -5 -5\">\n    delta on text\n  </Text>\n</Svg>\n```\n\n![TSpan](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/tspan.png)\n\n#### TextPath\n\nIn addition to text drawn in a straight line, SVG also includes the ability to place text along the shape of a <Path> element. To specify that a block of text is to be rendered along the shape of a <Path>, include the given text within a <TextPath> element which includes an href attribute with a reference to a <Path> element.\n\n```jsx\n<Svg height=\"100\" width=\"200\">\n  <Defs>\n    <Path id=\"path\" d={path} />\n  </Defs>\n  <G y=\"20\">\n    <Text fill=\"blue\">\n      <TextPath href=\"#path\" startOffset=\"-10%\">\n        We go up and down,\n        <TSpan fill=\"red\" dy=\"5,5,5\">\n          then up again\n        </TSpan>\n      </TextPath>\n    </Text>\n    <Path d={path} fill=\"none\" stroke=\"red\" strokeWidth=\"1\" />\n  </G>\n</Svg>\n```\n\n![TextPath](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/text-path.png)\n\n#### G\n\nThe <G> element is a container used to group other SVG elements. Transformations applied to the g element are performed on all of its child elements, and any of its props are inherited by its child elements. It can also group multiple elements to be referenced later with the [&lt;Use /&gt;](#use) element.\n\n```jsx\n<Svg height=\"100\" width=\"200\">\n  <G rotation=\"50\" origin=\"100, 50\">\n    <Line x1=\"60\" y1=\"10\" x2=\"140\" y2=\"10\" stroke=\"#060\" />\n\n    <Rect x=\"60\" y=\"20\" height=\"50\" width=\"80\" stroke=\"#060\" fill=\"#060\" />\n\n    <Text x=\"100\" y=\"75\" stroke=\"#600\" fill=\"#600\" textAnchor=\"middle\">\n      Text grouped with shapes\n    </Text>\n  </G>\n</Svg>\n```\n\n![G](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/g.png)\n\n#### Use\n\nThe <Use> element can reuse an SVG shape from elsewhere in the SVG document, including <G> elements and <Symbol> elements. The reused shape can be defined inside the [&lt;Defs&gt;](#defs) element (which makes the shape invisible until used) or outside.\n\n```jsx\n<Svg height=\"100\" width=\"300\">\n  <Defs>\n    <G id=\"shape\">\n      <G>\n        <Circle cx=\"50\" cy=\"50\" r=\"50\" />\n        <Rect x=\"50\" y=\"50\" width=\"50\" height=\"50\" />\n        <Circle cx=\"50\" cy=\"50\" r=\"5\" fill=\"blue\" />\n      </G>\n    </G>\n  </Defs>\n  <Use href=\"#shape\" x=\"20\" y=\"0\" />\n  <Use href=\"#shape\" x=\"170\" y=\"0\" />\n</Svg>\n```\n\nThis example shows a <G> element defined inside a [&lt;Defs&gt;](#defs) element. This makes the <G> invisible unless referenced by a <Use> element.\n\nBefore the <G> element can be referenced, it must have an ID set on it via its id prop. The <Use> element references the <G> element via its `href` prop. Notice the # in front of the ID in the prop value.\n\nThe <Use> element specifies where to show the reused shapes via its x and y props. Notice that the shapes inside the <G> element are located at 0,0. That is done because their position is added to the position specified in the <Use> element.\n\n![use](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/use.png)\n\n#### Symbol\n\nThe SVG <Symbol> element is used to define reusable symbols. The shapes nested inside a <Symbol> are not displayed unless referenced by a <Use> element.\n\n```jsx\n<Svg height=\"150\" width=\"110\">\n  <Symbol id=\"symbol\" viewBox=\"0 0 150 110\" width=\"100\" height=\"50\">\n    <Circle cx=\"50\" cy=\"50\" r=\"40\" strokeWidth=\"8\" stroke=\"red\" fill=\"red\" />\n    <Circle\n      cx=\"90\"\n      cy=\"60\"\n      r=\"40\"\n      strokeWidth=\"8\"\n      stroke=\"green\"\n      fill=\"white\"\n    />\n  </Symbol>\n\n  <Use href=\"#symbol\" x=\"0\" y=\"0\" />\n  <Use href=\"#symbol\" x=\"0\" y=\"50\" width=\"75\" height=\"38\" />\n  <Use href=\"#symbol\" x=\"0\" y=\"100\" width=\"50\" height=\"25\" />\n</Svg>\n```\n\n![Symbol](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/symbol.png)\n\n#### Defs\n\nThe <Defs> element is used to embed definitions that can be reused inside an SVG image. For instance, you can group SVG shapes together and reuse them as a single shape.\n\n#### Image\n\nThe <Image> element allows a raster image to be included in an Svg componenet.\n\n```jsx\n<Svg height=\"100\" width=\"100\">\n  <Defs>\n    <ClipPath id=\"clip\">\n      <Circle cx=\"50%\" cy=\"50%\" r=\"40%\" />\n    </ClipPath>\n  </Defs>\n  <Rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"red\" />\n  <Rect x=\"5%\" y=\"5%\" width=\"50%\" height=\"90%\" />\n\n  <Image\n    x=\"5%\"\n    y=\"5%\"\n    width=\"50%\"\n    height=\"90%\"\n    preserveAspectRatio=\"xMidYMid slice\"\n    opacity=\"0.5\"\n    href={require('../image.jpg')}\n    clipPath=\"url(#clip)\"\n  />\n  <Text\n    x=\"50\"\n    y=\"50\"\n    textAnchor=\"middle\"\n    fontWeight=\"bold\"\n    fontSize=\"16\"\n    fill=\"blue\"\n  >\n    HOGWARTS\n  </Text>\n</Svg>\n```\n\n![Image](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/image.png)\n\n#### ClipPath\n\nThe <ClipPath> SVG element defines a clipping path. A clipping path is used/referenced using the clipPath property\n\n```jsx\n<Svg height=\"100\" width=\"100\">\n  <Defs>\n    <RadialGradient\n      id=\"grad\"\n      cx=\"50%\"\n      cy=\"50%\"\n      rx=\"50%\"\n      ry=\"50%\"\n      fx=\"50%\"\n      fy=\"50%\"\n      gradientUnits=\"userSpaceOnUse\"\n    >\n      <Stop offset=\"0%\" stopColor=\"#ff0\" stopOpacity=\"1\" />\n      <Stop offset=\"100%\" stopColor=\"#00f\" stopOpacity=\"1\" />\n    </RadialGradient>\n    <ClipPath id=\"clip\">\n      <G scale=\"0.9\" x=\"10\">\n        <Circle cx=\"30\" cy=\"30\" r=\"20\" />\n        <Ellipse cx=\"60\" cy=\"70\" rx=\"20\" ry=\"10\" />\n        <Rect x=\"65\" y=\"15\" width=\"30\" height=\"30\" />\n        <Polygon points=\"20,60 20,80 50,70\" />\n        <Text\n          x=\"50\"\n          y=\"30\"\n          fontSize=\"32\"\n          fonWeight=\"bold\"\n          textAnchor=\"middle\"\n          scale=\"1.2\"\n        >\n          Q\n        </Text>\n      </G>\n    </ClipPath>\n  </Defs>\n  <Rect\n    x=\"0\"\n    y=\"0\"\n    width=\"100\"\n    height=\"100\"\n    fill=\"url(#grad)\"\n    clipPath=\"url(#clip)\"\n  />\n</Svg>\n```\n\n![ClipPath](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/clip-path.png)\n\n#### LinearGradient\n\nThe <LinearGradient> element is used to define a linear gradient.\nThe <LinearGradient> element must be nested within a [&lt;Defs&gt;](#defs) tag. The [&lt;Defs&gt;](#defs) tag is short for definitions and contains definition of special elements (such as gradients).\n\nLinear gradients can be defined as horizontal, vertical or angular gradients:\n\n- Horizontal gradients are created when y1 and y2 are equal and x1 and x2 differ\n- Vertical gradients are created when x1 and x2 are equal and y1 and y2 differ\n- Angular gradients are created when x1 and x2 differ and y1 and y2 differ\n\n```jsx\n<Svg height=\"150\" width=\"300\">\n  <Defs>\n    <LinearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"170\" y2=\"0\">\n      <Stop offset=\"0\" stopColor=\"rgb(255,255,0)\" stopOpacity=\"0\" />\n      <Stop offset=\"1\" stopColor=\"red\" stopOpacity=\"1\" />\n    </LinearGradient>\n  </Defs>\n  <Ellipse cx=\"150\" cy=\"75\" rx=\"85\" ry=\"55\" fill=\"url(#grad)\" />\n</Svg>\n```\n\nCode explanation:\n\n- The id prop of the <LinearGradient> tag defines a unique name for the gradient\n- The x1, x2, y1,y2 props of the <LinearGradient> tag define the start and end position of the gradient\n- The color range for a gradient can be composed of two or more colors. Each color is specified with a <Stop> tag. The offset prop is used to define where the gradient color begin and end\n- The fill prop links the ellipse element to the gradient\n\n![LinearGradient](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/lineargradient.png)\n\n_NOTICE:_\nLinearGradient also supports percentage as prop:\n\n```jsx\n<LinearGradient id=\"grad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n  <Stop offset=\"0%\" stopColor=\"rgb(255,255,0)\" stopOpacity=\"0\" />\n  <Stop offset=\"100%\" stopColor=\"red\" stopOpacity=\"1\" />\n</LinearGradient>\n```\n\nThis result is same as the example before. But it's recommend to use exact number instead; it has performance advantages over using percentages.\n\n#### RadialGradient\n\nThe <RadialGradient> element is used to define a radial gradient. The <RadialGradient> element must be nested within a [&lt;Defs&gt;](#defs) tag. The [&lt;Defs&gt;](#defs) tag is short for definitions and contains definition of special elements (such as gradients).\n\n```jsx\n<Svg height=\"150\" width=\"300\">\n  <Defs>\n    <RadialGradient\n      id=\"grad\"\n      cx=\"150\"\n      cy=\"75\"\n      rx=\"85\"\n      ry=\"55\"\n      fx=\"150\"\n      fy=\"75\"\n      gradientUnits=\"userSpaceOnUse\"\n    >\n      <Stop offset=\"0\" stopColor=\"#ff0\" stopOpacity=\"1\" />\n      <Stop offset=\"1\" stopColor=\"#83a\" stopOpacity=\"1\" />\n    </RadialGradient>\n  </Defs>\n  <Ellipse cx=\"150\" cy=\"75\" rx=\"85\" ry=\"55\" fill=\"url(#grad)\" />\n</Svg>\n```\n\nCode explanation:\n\n- The id prop of the <radialGradient> tag defines a unique name for the gradient\n- The cx, cy and r props define the outermost circle and the fx and fy define the innermost circle\n- The color range for a gradient can be composed of two or more colors. Each color is specified with a <stop> tag. The offset prop is used to define where the gradient color begin and end\n- The fill prop links the ellipse element to the gradient\n\n![RadialGradient](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/radialgradient.png)\n\n#### Mask\n\nIn SVG, you can specify that any other graphics object or âGâ element can be used as an alpha mask for compositing the current object into the background.\n\nA mask is defined with a âMaskâ element. A mask is used/referenced using the âmaskâ property.\n\nA âMaskâ can contain any graphical elements or container elements such as a âGâ.\n\nThe <Mask> element must be nested within a [&lt;Defs&gt;](#defs) tag. The [&lt;Defs&gt;](#defs) tag is short for definitions and contains definition of special elements (such as gradients).\n\n<https://www.w3.org/TR/SVG11/images/masking/mask01.svg>\n\n```jsx\n<Svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 300\">\n  <Defs>\n    <LinearGradient\n      id=\"Gradient\"\n      gradientUnits=\"userSpaceOnUse\"\n      x1=\"0\"\n      y1=\"0\"\n      x2=\"800\"\n      y2=\"0\"\n    >\n      <Stop offset=\"0\" stopColor=\"white\" stopOpacity=\"0\" />\n      <Stop offset=\"1\" stopColor=\"white\" stopOpacity=\"1\" />\n    </LinearGradient>\n    <Mask\n      id=\"Mask\"\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      width=\"800\"\n      height=\"300\"\n    >\n      <Rect x=\"0\" y=\"0\" width=\"800\" height=\"300\" fill=\"url(#Gradient)\" />\n    </Mask>\n    <Text\n      id=\"Text\"\n      x=\"400\"\n      y=\"200\"\n      fontFamily=\"Verdana\"\n      fontSize=\"100\"\n      textAnchor=\"middle\"\n    >\n      Masked text\n    </Text>\n  </Defs>\n  <Rect x=\"0\" y=\"0\" width=\"800\" height=\"300\" fill=\"#FF8080\" />\n  <Use href=\"#Text\" fill=\"blue\" mask=\"url(#Mask)\" />\n  <Use href=\"#Text\" fill=\"none\" stroke=\"black\" stroke-width=\"2\" />\n</Svg>\n```\n\nCode explanation: <https://www.w3.org/TR/SVG11/masking.html#MaskElement>\n\n![Mask](https://www.w3.org/TR/SVG11/images/masking/mask01.svg)\n\n#### Pattern\n\nA pattern is used to fill or stroke an object using a pre-defined graphic object which can be replicated (\"tiled\") at fixed intervals in x and y to cover the areas to be painted. Patterns are defined using a âpatternâ element and then referenced by properties âfillâ and âstrokeâ on a given graphics element to indicate that the given element shall be filled or stroked with the referenced pattern.\nThe <Mask> element must be nested within a [&lt;Defs&gt;](#defs) tag. The [&lt;Defs&gt;](#defs) tag is short for definitions and contains definition of special elements (such as gradients).\n\n<https://www.w3.org/TR/SVG11/images/pservers/pattern01.svg>\n\n```jsx\n<Svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 400\">\n  <Defs>\n    <Pattern\n      id=\"TrianglePattern\"\n      patternUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      width=\"100\"\n      height=\"100\"\n      viewBox=\"0 0 10 10\"\n    >\n      <Path d=\"M 0 0 L 7 0 L 3.5 7 z\" fill=\"red\" stroke=\"blue\" />\n    </Pattern>\n  </Defs>\n  <Rect fill=\"none\" stroke=\"blue\" x=\"1\" y=\"1\" width=\"798\" height=\"398\" />\n  <Ellipse\n    fill=\"url(#TrianglePattern)\"\n    stroke=\"black\"\n    stroke-width=\"5\"\n    cx=\"400\"\n    cy=\"200\"\n    rx=\"350\"\n    ry=\"150\"\n  />\n</Svg>\n```\n\nCode explanation: <https://www.w3.org/TR/SVG11/pservers.html#PatternElement>\n\n![Pattern](https://www.w3.org/TR/SVG11/images/pservers/pattern01.svg)\n\n#### Touch Events\n\nTouch events are supported in react-native-svg. These include:\n\n- `disabled`\n- `onPress`\n- `onPressIn`\n- `onPressOut`\n- `onLongPress`\n- `delayPressIn`\n- `delayPressOut`\n- `delayLongPress`\n\nYou can use these events to provide interactivity to your react-native-svg components.\n\n```jsx\n<Circle\n  cx=\"50%\"\n  cy=\"50%\"\n  r=\"38%\"\n  fill=\"red\"\n  onPress={() => alert('Press on Circle')}\n/>\n```\n\n![TouchEvents](https://raw.githubusercontent.com/react-native-community/react-native-svg/master/screenshots/touchevents.gif)\n\nFor more examples of touch in action, checkout the [TouchEvents.js examples](https://github.com/magicismight/react-native-svg-example/blob/master/examples/TouchEvents.js).\n\n### Run example:\n\n```bash\n\ngit clone https://github.com/magicismight/react-native-svg-example.git\ncd react-native-svg-example\nyarn\n\n# run Android: react-native run-android\n# run iOS: react-native run-ios\n\n```\n\n### TODO:\n\n1. Add Native methods for elements.\n2. Marker element.\n3. Filters\n\n### Known issues:\n\n1. Unable to apply focus point of RadialGradient on Android.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-native-community/react-native-svg.git"
  },
  "scripts": {
    "format": "prettier README.md './src/**/*.{ts,tsx}' src/index.d.ts --write",
    "lint": "eslint --ext .ts,.tsx src",
    "peg": "pegjs -o src/lib/extract/transform.js ./src/lib/extract/transform.peg",
    "prepare": "bob build",
    "semantic-release": "semantic-release",
    "test": "yarn lint && yarn tsc",
    "tsc": "tsc --noEmit"
  },
  "types": "src/index.d.ts",
  "version": "9.9.2"
}
